// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BombPlane_proto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BombPlane_proto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace bombplane_proto {

void protobuf_ShutdownFile_BombPlane_5fproto_2eproto() {
  delete Message::default_instance_;
  delete LoginRequest::default_instance_;
  delete LoginResponse::default_instance_;
  delete OnlineUser::default_instance_;
  delete OnlinelistNotification::default_instance_;
  delete UpdateonlineBroadcast::default_instance_;
  delete InviteRequest::default_instance_;
  delete InviteResponse::default_instance_;
  delete UpdateroomBroadcast::default_instance_;
  delete Coordinate::default_instance_;
  delete PlaneLocator::default_instance_;
  delete InitposNotification::default_instance_;
  delete GamestartNotification::default_instance_;
  delete BombRequest::default_instance_;
  delete BombResponse::default_instance_;
  delete GuessRequest::default_instance_;
  delete GuessResponse::default_instance_;
  delete GameoverNotification::default_instance_;
  delete GamecrushNotification::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_BombPlane_5fproto_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_BombPlane_5fproto_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_BombPlane_5fproto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  Message::default_instance_ = new Message();
  LoginRequest::default_instance_ = new LoginRequest();
  LoginResponse::default_instance_ = new LoginResponse();
  OnlineUser::default_instance_ = new OnlineUser();
  OnlinelistNotification::default_instance_ = new OnlinelistNotification();
  UpdateonlineBroadcast::default_instance_ = new UpdateonlineBroadcast();
  InviteRequest::default_instance_ = new InviteRequest();
  InviteResponse::default_instance_ = new InviteResponse();
  UpdateroomBroadcast::default_instance_ = new UpdateroomBroadcast();
  Coordinate::default_instance_ = new Coordinate();
  PlaneLocator::default_instance_ = new PlaneLocator();
  InitposNotification::default_instance_ = new InitposNotification();
  GamestartNotification::default_instance_ = new GamestartNotification();
  BombRequest::default_instance_ = new BombRequest();
  BombResponse::default_instance_ = new BombResponse();
  GuessRequest::default_instance_ = new GuessRequest();
  GuessResponse::default_instance_ = new GuessResponse();
  GameoverNotification::default_instance_ = new GameoverNotification();
  GamecrushNotification::default_instance_ = new GamecrushNotification();
  Message::default_instance_->InitAsDefaultInstance();
  LoginRequest::default_instance_->InitAsDefaultInstance();
  LoginResponse::default_instance_->InitAsDefaultInstance();
  OnlineUser::default_instance_->InitAsDefaultInstance();
  OnlinelistNotification::default_instance_->InitAsDefaultInstance();
  UpdateonlineBroadcast::default_instance_->InitAsDefaultInstance();
  InviteRequest::default_instance_->InitAsDefaultInstance();
  InviteResponse::default_instance_->InitAsDefaultInstance();
  UpdateroomBroadcast::default_instance_->InitAsDefaultInstance();
  Coordinate::default_instance_->InitAsDefaultInstance();
  PlaneLocator::default_instance_->InitAsDefaultInstance();
  InitposNotification::default_instance_->InitAsDefaultInstance();
  GamestartNotification::default_instance_->InitAsDefaultInstance();
  BombRequest::default_instance_->InitAsDefaultInstance();
  BombResponse::default_instance_->InitAsDefaultInstance();
  GuessRequest::default_instance_->InitAsDefaultInstance();
  GuessResponse::default_instance_->InitAsDefaultInstance();
  GameoverNotification::default_instance_->InitAsDefaultInstance();
  GamecrushNotification::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BombPlane_5fproto_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_BombPlane_5fproto_2eproto_once_);
void protobuf_AddDesc_BombPlane_5fproto_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_BombPlane_5fproto_2eproto_once_,
                 &protobuf_AddDesc_BombPlane_5fproto_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BombPlane_5fproto_2eproto {
  StaticDescriptorInitializer_BombPlane_5fproto_2eproto() {
    protobuf_AddDesc_BombPlane_5fproto_2eproto();
  }
} static_descriptor_initializer_BombPlane_5fproto_2eproto_;
#endif
bool Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 201:
    case 202:
    case 203:
    case 204:
    case 301:
    case 302:
    case 303:
    case 403:
    case 404:
    case 405:
    case 406:
    case 407:
    case 408:
    case 409:
    case 410:
    case 411:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kTypeFieldNumber;
const int Message::kLoginrequestFieldNumber;
const int Message::kLoginresponseFieldNumber;
const int Message::kOnlinelistnotificationFieldNumber;
const int Message::kUpdateonlinebroadcastFieldNumber;
const int Message::kInviterequestFieldNumber;
const int Message::kInviteresponseFieldNumber;
const int Message::kUpdateroombroadcastFieldNumber;
const int Message::kInitposnotificationFieldNumber;
const int Message::kGamestartnotificationFieldNumber;
const int Message::kBombrequestFieldNumber;
const int Message::kBombresponseFieldNumber;
const int Message::kGuessrequestFieldNumber;
const int Message::kGuessresponseFieldNumber;
const int Message::kGameovernotificationFieldNumber;
const int Message::kGamecrushnotificationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bombplane_proto.Message)
}

void Message::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Message::Message(const Message& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bombplane_proto.Message)
}

void Message::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  clear_has_body();
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:bombplane_proto.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  if (has_body()) {
    clear_body();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Message& Message::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_BombPlane_5fproto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_BombPlane_5fproto_2eproto();
#endif
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New(::google::protobuf::Arena* arena) const {
  Message* n = new Message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message::clear_body() {
// @@protoc_insertion_point(one_of_clear_start:bombplane_proto.Message)
  switch(body_case()) {
    case kLoginrequest: {
      delete body_.loginrequest_;
      break;
    }
    case kLoginresponse: {
      delete body_.loginresponse_;
      break;
    }
    case kOnlinelistnotification: {
      delete body_.onlinelistnotification_;
      break;
    }
    case kUpdateonlinebroadcast: {
      delete body_.updateonlinebroadcast_;
      break;
    }
    case kInviterequest: {
      delete body_.inviterequest_;
      break;
    }
    case kInviteresponse: {
      delete body_.inviteresponse_;
      break;
    }
    case kUpdateroombroadcast: {
      delete body_.updateroombroadcast_;
      break;
    }
    case kInitposnotification: {
      delete body_.initposnotification_;
      break;
    }
    case kGamestartnotification: {
      delete body_.gamestartnotification_;
      break;
    }
    case kBombrequest: {
      delete body_.bombrequest_;
      break;
    }
    case kBombresponse: {
      delete body_.bombresponse_;
      break;
    }
    case kGuessrequest: {
      delete body_.guessrequest_;
      break;
    }
    case kGuessresponse: {
      delete body_.guessresponse_;
      break;
    }
    case kGameovernotification: {
      delete body_.gameovernotification_;
      break;
    }
    case kGamecrushnotification: {
      delete body_.gamecrushnotification_;
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BODY_NOT_SET;
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:bombplane_proto.Message)
  type_ = 0;
  clear_body();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bombplane_proto.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bombplane_proto.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::bombplane_proto::Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1610)) goto parse_loginrequest;
        break;
      }

      // optional .bombplane_proto.LoginRequest loginrequest = 201;
      case 201: {
        if (tag == 1610) {
         parse_loginrequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loginrequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1618)) goto parse_loginresponse;
        break;
      }

      // optional .bombplane_proto.LoginResponse loginresponse = 202;
      case 202: {
        if (tag == 1618) {
         parse_loginresponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loginresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1626)) goto parse_onlinelistnotification;
        break;
      }

      // optional .bombplane_proto.OnlinelistNotification onlinelistnotification = 203;
      case 203: {
        if (tag == 1626) {
         parse_onlinelistnotification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_onlinelistnotification()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1634)) goto parse_updateonlinebroadcast;
        break;
      }

      // optional .bombplane_proto.UpdateonlineBroadcast updateonlinebroadcast = 204;
      case 204: {
        if (tag == 1634) {
         parse_updateonlinebroadcast:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_updateonlinebroadcast()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2410)) goto parse_inviterequest;
        break;
      }

      // optional .bombplane_proto.InviteRequest inviterequest = 301;
      case 301: {
        if (tag == 2410) {
         parse_inviterequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inviterequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2418)) goto parse_inviteresponse;
        break;
      }

      // optional .bombplane_proto.InviteResponse inviteresponse = 302;
      case 302: {
        if (tag == 2418) {
         parse_inviteresponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inviteresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2426)) goto parse_updateroombroadcast;
        break;
      }

      // optional .bombplane_proto.UpdateroomBroadcast updateroombroadcast = 303;
      case 303: {
        if (tag == 2426) {
         parse_updateroombroadcast:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_updateroombroadcast()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(3226)) goto parse_initposnotification;
        break;
      }

      // optional .bombplane_proto.InitposNotification initposnotification = 403;
      case 403: {
        if (tag == 3226) {
         parse_initposnotification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initposnotification()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(3234)) goto parse_gamestartnotification;
        break;
      }

      // optional .bombplane_proto.GamestartNotification gamestartnotification = 404;
      case 404: {
        if (tag == 3234) {
         parse_gamestartnotification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamestartnotification()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(3242)) goto parse_bombrequest;
        break;
      }

      // optional .bombplane_proto.BombRequest bombrequest = 405;
      case 405: {
        if (tag == 3242) {
         parse_bombrequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bombrequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(3250)) goto parse_bombresponse;
        break;
      }

      // optional .bombplane_proto.BombResponse bombresponse = 406;
      case 406: {
        if (tag == 3250) {
         parse_bombresponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bombresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(3258)) goto parse_guessrequest;
        break;
      }

      // optional .bombplane_proto.GuessRequest guessrequest = 407;
      case 407: {
        if (tag == 3258) {
         parse_guessrequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guessrequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(3266)) goto parse_guessresponse;
        break;
      }

      // optional .bombplane_proto.GuessResponse guessresponse = 408;
      case 408: {
        if (tag == 3266) {
         parse_guessresponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guessresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(3274)) goto parse_gameovernotification;
        break;
      }

      // optional .bombplane_proto.GameoverNotification gameovernotification = 409;
      case 409: {
        if (tag == 3274) {
         parse_gameovernotification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameovernotification()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(3282)) goto parse_gamecrushnotification;
        break;
      }

      // optional .bombplane_proto.GamecrushNotification gamecrushnotification = 410;
      case 410: {
        if (tag == 3282) {
         parse_gamecrushnotification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamecrushnotification()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bombplane_proto.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bombplane_proto.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bombplane_proto.Message)
  // optional .bombplane_proto.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .bombplane_proto.LoginRequest loginrequest = 201;
  if (has_loginrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      201, *body_.loginrequest_, output);
  }

  // optional .bombplane_proto.LoginResponse loginresponse = 202;
  if (has_loginresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      202, *body_.loginresponse_, output);
  }

  // optional .bombplane_proto.OnlinelistNotification onlinelistnotification = 203;
  if (has_onlinelistnotification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      203, *body_.onlinelistnotification_, output);
  }

  // optional .bombplane_proto.UpdateonlineBroadcast updateonlinebroadcast = 204;
  if (has_updateonlinebroadcast()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      204, *body_.updateonlinebroadcast_, output);
  }

  // optional .bombplane_proto.InviteRequest inviterequest = 301;
  if (has_inviterequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      301, *body_.inviterequest_, output);
  }

  // optional .bombplane_proto.InviteResponse inviteresponse = 302;
  if (has_inviteresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      302, *body_.inviteresponse_, output);
  }

  // optional .bombplane_proto.UpdateroomBroadcast updateroombroadcast = 303;
  if (has_updateroombroadcast()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      303, *body_.updateroombroadcast_, output);
  }

  // optional .bombplane_proto.InitposNotification initposnotification = 403;
  if (has_initposnotification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      403, *body_.initposnotification_, output);
  }

  // optional .bombplane_proto.GamestartNotification gamestartnotification = 404;
  if (has_gamestartnotification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      404, *body_.gamestartnotification_, output);
  }

  // optional .bombplane_proto.BombRequest bombrequest = 405;
  if (has_bombrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      405, *body_.bombrequest_, output);
  }

  // optional .bombplane_proto.BombResponse bombresponse = 406;
  if (has_bombresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      406, *body_.bombresponse_, output);
  }

  // optional .bombplane_proto.GuessRequest guessrequest = 407;
  if (has_guessrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      407, *body_.guessrequest_, output);
  }

  // optional .bombplane_proto.GuessResponse guessresponse = 408;
  if (has_guessresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      408, *body_.guessresponse_, output);
  }

  // optional .bombplane_proto.GameoverNotification gameovernotification = 409;
  if (has_gameovernotification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      409, *body_.gameovernotification_, output);
  }

  // optional .bombplane_proto.GamecrushNotification gamecrushnotification = 410;
  if (has_gamecrushnotification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      410, *body_.gamecrushnotification_, output);
  }

  // @@protoc_insertion_point(serialize_end:bombplane_proto.Message)
}

int Message::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bombplane_proto.Message)
  int total_size = 0;

  // optional .bombplane_proto.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  switch (body_case()) {
    // optional .bombplane_proto.LoginRequest loginrequest = 201;
    case kLoginrequest: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *body_.loginrequest_);
      break;
    }
    // optional .bombplane_proto.LoginResponse loginresponse = 202;
    case kLoginresponse: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *body_.loginresponse_);
      break;
    }
    // optional .bombplane_proto.OnlinelistNotification onlinelistnotification = 203;
    case kOnlinelistnotification: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *body_.onlinelistnotification_);
      break;
    }
    // optional .bombplane_proto.UpdateonlineBroadcast updateonlinebroadcast = 204;
    case kUpdateonlinebroadcast: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *body_.updateonlinebroadcast_);
      break;
    }
    // optional .bombplane_proto.InviteRequest inviterequest = 301;
    case kInviterequest: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *body_.inviterequest_);
      break;
    }
    // optional .bombplane_proto.InviteResponse inviteresponse = 302;
    case kInviteresponse: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *body_.inviteresponse_);
      break;
    }
    // optional .bombplane_proto.UpdateroomBroadcast updateroombroadcast = 303;
    case kUpdateroombroadcast: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *body_.updateroombroadcast_);
      break;
    }
    // optional .bombplane_proto.InitposNotification initposnotification = 403;
    case kInitposnotification: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *body_.initposnotification_);
      break;
    }
    // optional .bombplane_proto.GamestartNotification gamestartnotification = 404;
    case kGamestartnotification: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *body_.gamestartnotification_);
      break;
    }
    // optional .bombplane_proto.BombRequest bombrequest = 405;
    case kBombrequest: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *body_.bombrequest_);
      break;
    }
    // optional .bombplane_proto.BombResponse bombresponse = 406;
    case kBombresponse: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *body_.bombresponse_);
      break;
    }
    // optional .bombplane_proto.GuessRequest guessrequest = 407;
    case kGuessrequest: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *body_.guessrequest_);
      break;
    }
    // optional .bombplane_proto.GuessResponse guessresponse = 408;
    case kGuessresponse: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *body_.guessresponse_);
      break;
    }
    // optional .bombplane_proto.GameoverNotification gameovernotification = 409;
    case kGameovernotification: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *body_.gameovernotification_);
      break;
    }
    // optional .bombplane_proto.GamecrushNotification gamecrushnotification = 410;
    case kGamecrushnotification: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *body_.gamecrushnotification_);
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Message*>(&from));
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bombplane_proto.Message)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.body_case()) {
    case kLoginrequest: {
      mutable_loginrequest()->::bombplane_proto::LoginRequest::MergeFrom(from.loginrequest());
      break;
    }
    case kLoginresponse: {
      mutable_loginresponse()->::bombplane_proto::LoginResponse::MergeFrom(from.loginresponse());
      break;
    }
    case kOnlinelistnotification: {
      mutable_onlinelistnotification()->::bombplane_proto::OnlinelistNotification::MergeFrom(from.onlinelistnotification());
      break;
    }
    case kUpdateonlinebroadcast: {
      mutable_updateonlinebroadcast()->::bombplane_proto::UpdateonlineBroadcast::MergeFrom(from.updateonlinebroadcast());
      break;
    }
    case kInviterequest: {
      mutable_inviterequest()->::bombplane_proto::InviteRequest::MergeFrom(from.inviterequest());
      break;
    }
    case kInviteresponse: {
      mutable_inviteresponse()->::bombplane_proto::InviteResponse::MergeFrom(from.inviteresponse());
      break;
    }
    case kUpdateroombroadcast: {
      mutable_updateroombroadcast()->::bombplane_proto::UpdateroomBroadcast::MergeFrom(from.updateroombroadcast());
      break;
    }
    case kInitposnotification: {
      mutable_initposnotification()->::bombplane_proto::InitposNotification::MergeFrom(from.initposnotification());
      break;
    }
    case kGamestartnotification: {
      mutable_gamestartnotification()->::bombplane_proto::GamestartNotification::MergeFrom(from.gamestartnotification());
      break;
    }
    case kBombrequest: {
      mutable_bombrequest()->::bombplane_proto::BombRequest::MergeFrom(from.bombrequest());
      break;
    }
    case kBombresponse: {
      mutable_bombresponse()->::bombplane_proto::BombResponse::MergeFrom(from.bombresponse());
      break;
    }
    case kGuessrequest: {
      mutable_guessrequest()->::bombplane_proto::GuessRequest::MergeFrom(from.guessrequest());
      break;
    }
    case kGuessresponse: {
      mutable_guessresponse()->::bombplane_proto::GuessResponse::MergeFrom(from.guessresponse());
      break;
    }
    case kGameovernotification: {
      mutable_gameovernotification()->::bombplane_proto::GameoverNotification::MergeFrom(from.gameovernotification());
      break;
    }
    case kGamecrushnotification: {
      mutable_gamecrushnotification()->::bombplane_proto::GamecrushNotification::MergeFrom(from.gamecrushnotification());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bombplane_proto.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {

  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  std::swap(type_, other->type_);
  std::swap(body_, other->body_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Message::GetTypeName() const {
  return "bombplane_proto.Message";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Message

// optional .bombplane_proto.Type type = 1;
void Message::clear_type() {
  type_ = 0;
}
 ::bombplane_proto::Type Message::type() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.Message.type)
  return static_cast< ::bombplane_proto::Type >(type_);
}
 void Message::set_type(::bombplane_proto::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:bombplane_proto.Message.type)
}

// optional .bombplane_proto.LoginRequest loginrequest = 201;
bool Message::has_loginrequest() const {
  return body_case() == kLoginrequest;
}
void Message::set_has_loginrequest() {
  _oneof_case_[0] = kLoginrequest;
}
void Message::clear_loginrequest() {
  if (has_loginrequest()) {
    delete body_.loginrequest_;
    clear_has_body();
  }
}
 const ::bombplane_proto::LoginRequest& Message::loginrequest() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.Message.loginrequest)
  return has_loginrequest()
      ? *body_.loginrequest_
      : ::bombplane_proto::LoginRequest::default_instance();
}
::bombplane_proto::LoginRequest* Message::mutable_loginrequest() {
  if (!has_loginrequest()) {
    clear_body();
    set_has_loginrequest();
    body_.loginrequest_ = new ::bombplane_proto::LoginRequest;
  }
  // @@protoc_insertion_point(field_mutable:bombplane_proto.Message.loginrequest)
  return body_.loginrequest_;
}
::bombplane_proto::LoginRequest* Message::release_loginrequest() {
  // @@protoc_insertion_point(field_release:bombplane_proto.Message.loginrequest)
  if (has_loginrequest()) {
    clear_has_body();
    ::bombplane_proto::LoginRequest* temp = body_.loginrequest_;
    body_.loginrequest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Message::set_allocated_loginrequest(::bombplane_proto::LoginRequest* loginrequest) {
  clear_body();
  if (loginrequest) {
    set_has_loginrequest();
    body_.loginrequest_ = loginrequest;
  }
  // @@protoc_insertion_point(field_set_allocated:bombplane_proto.Message.loginrequest)
}

// optional .bombplane_proto.LoginResponse loginresponse = 202;
bool Message::has_loginresponse() const {
  return body_case() == kLoginresponse;
}
void Message::set_has_loginresponse() {
  _oneof_case_[0] = kLoginresponse;
}
void Message::clear_loginresponse() {
  if (has_loginresponse()) {
    delete body_.loginresponse_;
    clear_has_body();
  }
}
 const ::bombplane_proto::LoginResponse& Message::loginresponse() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.Message.loginresponse)
  return has_loginresponse()
      ? *body_.loginresponse_
      : ::bombplane_proto::LoginResponse::default_instance();
}
::bombplane_proto::LoginResponse* Message::mutable_loginresponse() {
  if (!has_loginresponse()) {
    clear_body();
    set_has_loginresponse();
    body_.loginresponse_ = new ::bombplane_proto::LoginResponse;
  }
  // @@protoc_insertion_point(field_mutable:bombplane_proto.Message.loginresponse)
  return body_.loginresponse_;
}
::bombplane_proto::LoginResponse* Message::release_loginresponse() {
  // @@protoc_insertion_point(field_release:bombplane_proto.Message.loginresponse)
  if (has_loginresponse()) {
    clear_has_body();
    ::bombplane_proto::LoginResponse* temp = body_.loginresponse_;
    body_.loginresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Message::set_allocated_loginresponse(::bombplane_proto::LoginResponse* loginresponse) {
  clear_body();
  if (loginresponse) {
    set_has_loginresponse();
    body_.loginresponse_ = loginresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:bombplane_proto.Message.loginresponse)
}

// optional .bombplane_proto.OnlinelistNotification onlinelistnotification = 203;
bool Message::has_onlinelistnotification() const {
  return body_case() == kOnlinelistnotification;
}
void Message::set_has_onlinelistnotification() {
  _oneof_case_[0] = kOnlinelistnotification;
}
void Message::clear_onlinelistnotification() {
  if (has_onlinelistnotification()) {
    delete body_.onlinelistnotification_;
    clear_has_body();
  }
}
 const ::bombplane_proto::OnlinelistNotification& Message::onlinelistnotification() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.Message.onlinelistnotification)
  return has_onlinelistnotification()
      ? *body_.onlinelistnotification_
      : ::bombplane_proto::OnlinelistNotification::default_instance();
}
::bombplane_proto::OnlinelistNotification* Message::mutable_onlinelistnotification() {
  if (!has_onlinelistnotification()) {
    clear_body();
    set_has_onlinelistnotification();
    body_.onlinelistnotification_ = new ::bombplane_proto::OnlinelistNotification;
  }
  // @@protoc_insertion_point(field_mutable:bombplane_proto.Message.onlinelistnotification)
  return body_.onlinelistnotification_;
}
::bombplane_proto::OnlinelistNotification* Message::release_onlinelistnotification() {
  // @@protoc_insertion_point(field_release:bombplane_proto.Message.onlinelistnotification)
  if (has_onlinelistnotification()) {
    clear_has_body();
    ::bombplane_proto::OnlinelistNotification* temp = body_.onlinelistnotification_;
    body_.onlinelistnotification_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Message::set_allocated_onlinelistnotification(::bombplane_proto::OnlinelistNotification* onlinelistnotification) {
  clear_body();
  if (onlinelistnotification) {
    set_has_onlinelistnotification();
    body_.onlinelistnotification_ = onlinelistnotification;
  }
  // @@protoc_insertion_point(field_set_allocated:bombplane_proto.Message.onlinelistnotification)
}

// optional .bombplane_proto.UpdateonlineBroadcast updateonlinebroadcast = 204;
bool Message::has_updateonlinebroadcast() const {
  return body_case() == kUpdateonlinebroadcast;
}
void Message::set_has_updateonlinebroadcast() {
  _oneof_case_[0] = kUpdateonlinebroadcast;
}
void Message::clear_updateonlinebroadcast() {
  if (has_updateonlinebroadcast()) {
    delete body_.updateonlinebroadcast_;
    clear_has_body();
  }
}
 const ::bombplane_proto::UpdateonlineBroadcast& Message::updateonlinebroadcast() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.Message.updateonlinebroadcast)
  return has_updateonlinebroadcast()
      ? *body_.updateonlinebroadcast_
      : ::bombplane_proto::UpdateonlineBroadcast::default_instance();
}
::bombplane_proto::UpdateonlineBroadcast* Message::mutable_updateonlinebroadcast() {
  if (!has_updateonlinebroadcast()) {
    clear_body();
    set_has_updateonlinebroadcast();
    body_.updateonlinebroadcast_ = new ::bombplane_proto::UpdateonlineBroadcast;
  }
  // @@protoc_insertion_point(field_mutable:bombplane_proto.Message.updateonlinebroadcast)
  return body_.updateonlinebroadcast_;
}
::bombplane_proto::UpdateonlineBroadcast* Message::release_updateonlinebroadcast() {
  // @@protoc_insertion_point(field_release:bombplane_proto.Message.updateonlinebroadcast)
  if (has_updateonlinebroadcast()) {
    clear_has_body();
    ::bombplane_proto::UpdateonlineBroadcast* temp = body_.updateonlinebroadcast_;
    body_.updateonlinebroadcast_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Message::set_allocated_updateonlinebroadcast(::bombplane_proto::UpdateonlineBroadcast* updateonlinebroadcast) {
  clear_body();
  if (updateonlinebroadcast) {
    set_has_updateonlinebroadcast();
    body_.updateonlinebroadcast_ = updateonlinebroadcast;
  }
  // @@protoc_insertion_point(field_set_allocated:bombplane_proto.Message.updateonlinebroadcast)
}

// optional .bombplane_proto.InviteRequest inviterequest = 301;
bool Message::has_inviterequest() const {
  return body_case() == kInviterequest;
}
void Message::set_has_inviterequest() {
  _oneof_case_[0] = kInviterequest;
}
void Message::clear_inviterequest() {
  if (has_inviterequest()) {
    delete body_.inviterequest_;
    clear_has_body();
  }
}
 const ::bombplane_proto::InviteRequest& Message::inviterequest() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.Message.inviterequest)
  return has_inviterequest()
      ? *body_.inviterequest_
      : ::bombplane_proto::InviteRequest::default_instance();
}
::bombplane_proto::InviteRequest* Message::mutable_inviterequest() {
  if (!has_inviterequest()) {
    clear_body();
    set_has_inviterequest();
    body_.inviterequest_ = new ::bombplane_proto::InviteRequest;
  }
  // @@protoc_insertion_point(field_mutable:bombplane_proto.Message.inviterequest)
  return body_.inviterequest_;
}
::bombplane_proto::InviteRequest* Message::release_inviterequest() {
  // @@protoc_insertion_point(field_release:bombplane_proto.Message.inviterequest)
  if (has_inviterequest()) {
    clear_has_body();
    ::bombplane_proto::InviteRequest* temp = body_.inviterequest_;
    body_.inviterequest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Message::set_allocated_inviterequest(::bombplane_proto::InviteRequest* inviterequest) {
  clear_body();
  if (inviterequest) {
    set_has_inviterequest();
    body_.inviterequest_ = inviterequest;
  }
  // @@protoc_insertion_point(field_set_allocated:bombplane_proto.Message.inviterequest)
}

// optional .bombplane_proto.InviteResponse inviteresponse = 302;
bool Message::has_inviteresponse() const {
  return body_case() == kInviteresponse;
}
void Message::set_has_inviteresponse() {
  _oneof_case_[0] = kInviteresponse;
}
void Message::clear_inviteresponse() {
  if (has_inviteresponse()) {
    delete body_.inviteresponse_;
    clear_has_body();
  }
}
 const ::bombplane_proto::InviteResponse& Message::inviteresponse() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.Message.inviteresponse)
  return has_inviteresponse()
      ? *body_.inviteresponse_
      : ::bombplane_proto::InviteResponse::default_instance();
}
::bombplane_proto::InviteResponse* Message::mutable_inviteresponse() {
  if (!has_inviteresponse()) {
    clear_body();
    set_has_inviteresponse();
    body_.inviteresponse_ = new ::bombplane_proto::InviteResponse;
  }
  // @@protoc_insertion_point(field_mutable:bombplane_proto.Message.inviteresponse)
  return body_.inviteresponse_;
}
::bombplane_proto::InviteResponse* Message::release_inviteresponse() {
  // @@protoc_insertion_point(field_release:bombplane_proto.Message.inviteresponse)
  if (has_inviteresponse()) {
    clear_has_body();
    ::bombplane_proto::InviteResponse* temp = body_.inviteresponse_;
    body_.inviteresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Message::set_allocated_inviteresponse(::bombplane_proto::InviteResponse* inviteresponse) {
  clear_body();
  if (inviteresponse) {
    set_has_inviteresponse();
    body_.inviteresponse_ = inviteresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:bombplane_proto.Message.inviteresponse)
}

// optional .bombplane_proto.UpdateroomBroadcast updateroombroadcast = 303;
bool Message::has_updateroombroadcast() const {
  return body_case() == kUpdateroombroadcast;
}
void Message::set_has_updateroombroadcast() {
  _oneof_case_[0] = kUpdateroombroadcast;
}
void Message::clear_updateroombroadcast() {
  if (has_updateroombroadcast()) {
    delete body_.updateroombroadcast_;
    clear_has_body();
  }
}
 const ::bombplane_proto::UpdateroomBroadcast& Message::updateroombroadcast() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.Message.updateroombroadcast)
  return has_updateroombroadcast()
      ? *body_.updateroombroadcast_
      : ::bombplane_proto::UpdateroomBroadcast::default_instance();
}
::bombplane_proto::UpdateroomBroadcast* Message::mutable_updateroombroadcast() {
  if (!has_updateroombroadcast()) {
    clear_body();
    set_has_updateroombroadcast();
    body_.updateroombroadcast_ = new ::bombplane_proto::UpdateroomBroadcast;
  }
  // @@protoc_insertion_point(field_mutable:bombplane_proto.Message.updateroombroadcast)
  return body_.updateroombroadcast_;
}
::bombplane_proto::UpdateroomBroadcast* Message::release_updateroombroadcast() {
  // @@protoc_insertion_point(field_release:bombplane_proto.Message.updateroombroadcast)
  if (has_updateroombroadcast()) {
    clear_has_body();
    ::bombplane_proto::UpdateroomBroadcast* temp = body_.updateroombroadcast_;
    body_.updateroombroadcast_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Message::set_allocated_updateroombroadcast(::bombplane_proto::UpdateroomBroadcast* updateroombroadcast) {
  clear_body();
  if (updateroombroadcast) {
    set_has_updateroombroadcast();
    body_.updateroombroadcast_ = updateroombroadcast;
  }
  // @@protoc_insertion_point(field_set_allocated:bombplane_proto.Message.updateroombroadcast)
}

// optional .bombplane_proto.InitposNotification initposnotification = 403;
bool Message::has_initposnotification() const {
  return body_case() == kInitposnotification;
}
void Message::set_has_initposnotification() {
  _oneof_case_[0] = kInitposnotification;
}
void Message::clear_initposnotification() {
  if (has_initposnotification()) {
    delete body_.initposnotification_;
    clear_has_body();
  }
}
 const ::bombplane_proto::InitposNotification& Message::initposnotification() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.Message.initposnotification)
  return has_initposnotification()
      ? *body_.initposnotification_
      : ::bombplane_proto::InitposNotification::default_instance();
}
::bombplane_proto::InitposNotification* Message::mutable_initposnotification() {
  if (!has_initposnotification()) {
    clear_body();
    set_has_initposnotification();
    body_.initposnotification_ = new ::bombplane_proto::InitposNotification;
  }
  // @@protoc_insertion_point(field_mutable:bombplane_proto.Message.initposnotification)
  return body_.initposnotification_;
}
::bombplane_proto::InitposNotification* Message::release_initposnotification() {
  // @@protoc_insertion_point(field_release:bombplane_proto.Message.initposnotification)
  if (has_initposnotification()) {
    clear_has_body();
    ::bombplane_proto::InitposNotification* temp = body_.initposnotification_;
    body_.initposnotification_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Message::set_allocated_initposnotification(::bombplane_proto::InitposNotification* initposnotification) {
  clear_body();
  if (initposnotification) {
    set_has_initposnotification();
    body_.initposnotification_ = initposnotification;
  }
  // @@protoc_insertion_point(field_set_allocated:bombplane_proto.Message.initposnotification)
}

// optional .bombplane_proto.GamestartNotification gamestartnotification = 404;
bool Message::has_gamestartnotification() const {
  return body_case() == kGamestartnotification;
}
void Message::set_has_gamestartnotification() {
  _oneof_case_[0] = kGamestartnotification;
}
void Message::clear_gamestartnotification() {
  if (has_gamestartnotification()) {
    delete body_.gamestartnotification_;
    clear_has_body();
  }
}
 const ::bombplane_proto::GamestartNotification& Message::gamestartnotification() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.Message.gamestartnotification)
  return has_gamestartnotification()
      ? *body_.gamestartnotification_
      : ::bombplane_proto::GamestartNotification::default_instance();
}
::bombplane_proto::GamestartNotification* Message::mutable_gamestartnotification() {
  if (!has_gamestartnotification()) {
    clear_body();
    set_has_gamestartnotification();
    body_.gamestartnotification_ = new ::bombplane_proto::GamestartNotification;
  }
  // @@protoc_insertion_point(field_mutable:bombplane_proto.Message.gamestartnotification)
  return body_.gamestartnotification_;
}
::bombplane_proto::GamestartNotification* Message::release_gamestartnotification() {
  // @@protoc_insertion_point(field_release:bombplane_proto.Message.gamestartnotification)
  if (has_gamestartnotification()) {
    clear_has_body();
    ::bombplane_proto::GamestartNotification* temp = body_.gamestartnotification_;
    body_.gamestartnotification_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Message::set_allocated_gamestartnotification(::bombplane_proto::GamestartNotification* gamestartnotification) {
  clear_body();
  if (gamestartnotification) {
    set_has_gamestartnotification();
    body_.gamestartnotification_ = gamestartnotification;
  }
  // @@protoc_insertion_point(field_set_allocated:bombplane_proto.Message.gamestartnotification)
}

// optional .bombplane_proto.BombRequest bombrequest = 405;
bool Message::has_bombrequest() const {
  return body_case() == kBombrequest;
}
void Message::set_has_bombrequest() {
  _oneof_case_[0] = kBombrequest;
}
void Message::clear_bombrequest() {
  if (has_bombrequest()) {
    delete body_.bombrequest_;
    clear_has_body();
  }
}
 const ::bombplane_proto::BombRequest& Message::bombrequest() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.Message.bombrequest)
  return has_bombrequest()
      ? *body_.bombrequest_
      : ::bombplane_proto::BombRequest::default_instance();
}
::bombplane_proto::BombRequest* Message::mutable_bombrequest() {
  if (!has_bombrequest()) {
    clear_body();
    set_has_bombrequest();
    body_.bombrequest_ = new ::bombplane_proto::BombRequest;
  }
  // @@protoc_insertion_point(field_mutable:bombplane_proto.Message.bombrequest)
  return body_.bombrequest_;
}
::bombplane_proto::BombRequest* Message::release_bombrequest() {
  // @@protoc_insertion_point(field_release:bombplane_proto.Message.bombrequest)
  if (has_bombrequest()) {
    clear_has_body();
    ::bombplane_proto::BombRequest* temp = body_.bombrequest_;
    body_.bombrequest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Message::set_allocated_bombrequest(::bombplane_proto::BombRequest* bombrequest) {
  clear_body();
  if (bombrequest) {
    set_has_bombrequest();
    body_.bombrequest_ = bombrequest;
  }
  // @@protoc_insertion_point(field_set_allocated:bombplane_proto.Message.bombrequest)
}

// optional .bombplane_proto.BombResponse bombresponse = 406;
bool Message::has_bombresponse() const {
  return body_case() == kBombresponse;
}
void Message::set_has_bombresponse() {
  _oneof_case_[0] = kBombresponse;
}
void Message::clear_bombresponse() {
  if (has_bombresponse()) {
    delete body_.bombresponse_;
    clear_has_body();
  }
}
 const ::bombplane_proto::BombResponse& Message::bombresponse() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.Message.bombresponse)
  return has_bombresponse()
      ? *body_.bombresponse_
      : ::bombplane_proto::BombResponse::default_instance();
}
::bombplane_proto::BombResponse* Message::mutable_bombresponse() {
  if (!has_bombresponse()) {
    clear_body();
    set_has_bombresponse();
    body_.bombresponse_ = new ::bombplane_proto::BombResponse;
  }
  // @@protoc_insertion_point(field_mutable:bombplane_proto.Message.bombresponse)
  return body_.bombresponse_;
}
::bombplane_proto::BombResponse* Message::release_bombresponse() {
  // @@protoc_insertion_point(field_release:bombplane_proto.Message.bombresponse)
  if (has_bombresponse()) {
    clear_has_body();
    ::bombplane_proto::BombResponse* temp = body_.bombresponse_;
    body_.bombresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Message::set_allocated_bombresponse(::bombplane_proto::BombResponse* bombresponse) {
  clear_body();
  if (bombresponse) {
    set_has_bombresponse();
    body_.bombresponse_ = bombresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:bombplane_proto.Message.bombresponse)
}

// optional .bombplane_proto.GuessRequest guessrequest = 407;
bool Message::has_guessrequest() const {
  return body_case() == kGuessrequest;
}
void Message::set_has_guessrequest() {
  _oneof_case_[0] = kGuessrequest;
}
void Message::clear_guessrequest() {
  if (has_guessrequest()) {
    delete body_.guessrequest_;
    clear_has_body();
  }
}
 const ::bombplane_proto::GuessRequest& Message::guessrequest() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.Message.guessrequest)
  return has_guessrequest()
      ? *body_.guessrequest_
      : ::bombplane_proto::GuessRequest::default_instance();
}
::bombplane_proto::GuessRequest* Message::mutable_guessrequest() {
  if (!has_guessrequest()) {
    clear_body();
    set_has_guessrequest();
    body_.guessrequest_ = new ::bombplane_proto::GuessRequest;
  }
  // @@protoc_insertion_point(field_mutable:bombplane_proto.Message.guessrequest)
  return body_.guessrequest_;
}
::bombplane_proto::GuessRequest* Message::release_guessrequest() {
  // @@protoc_insertion_point(field_release:bombplane_proto.Message.guessrequest)
  if (has_guessrequest()) {
    clear_has_body();
    ::bombplane_proto::GuessRequest* temp = body_.guessrequest_;
    body_.guessrequest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Message::set_allocated_guessrequest(::bombplane_proto::GuessRequest* guessrequest) {
  clear_body();
  if (guessrequest) {
    set_has_guessrequest();
    body_.guessrequest_ = guessrequest;
  }
  // @@protoc_insertion_point(field_set_allocated:bombplane_proto.Message.guessrequest)
}

// optional .bombplane_proto.GuessResponse guessresponse = 408;
bool Message::has_guessresponse() const {
  return body_case() == kGuessresponse;
}
void Message::set_has_guessresponse() {
  _oneof_case_[0] = kGuessresponse;
}
void Message::clear_guessresponse() {
  if (has_guessresponse()) {
    delete body_.guessresponse_;
    clear_has_body();
  }
}
 const ::bombplane_proto::GuessResponse& Message::guessresponse() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.Message.guessresponse)
  return has_guessresponse()
      ? *body_.guessresponse_
      : ::bombplane_proto::GuessResponse::default_instance();
}
::bombplane_proto::GuessResponse* Message::mutable_guessresponse() {
  if (!has_guessresponse()) {
    clear_body();
    set_has_guessresponse();
    body_.guessresponse_ = new ::bombplane_proto::GuessResponse;
  }
  // @@protoc_insertion_point(field_mutable:bombplane_proto.Message.guessresponse)
  return body_.guessresponse_;
}
::bombplane_proto::GuessResponse* Message::release_guessresponse() {
  // @@protoc_insertion_point(field_release:bombplane_proto.Message.guessresponse)
  if (has_guessresponse()) {
    clear_has_body();
    ::bombplane_proto::GuessResponse* temp = body_.guessresponse_;
    body_.guessresponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Message::set_allocated_guessresponse(::bombplane_proto::GuessResponse* guessresponse) {
  clear_body();
  if (guessresponse) {
    set_has_guessresponse();
    body_.guessresponse_ = guessresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:bombplane_proto.Message.guessresponse)
}

// optional .bombplane_proto.GameoverNotification gameovernotification = 409;
bool Message::has_gameovernotification() const {
  return body_case() == kGameovernotification;
}
void Message::set_has_gameovernotification() {
  _oneof_case_[0] = kGameovernotification;
}
void Message::clear_gameovernotification() {
  if (has_gameovernotification()) {
    delete body_.gameovernotification_;
    clear_has_body();
  }
}
 const ::bombplane_proto::GameoverNotification& Message::gameovernotification() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.Message.gameovernotification)
  return has_gameovernotification()
      ? *body_.gameovernotification_
      : ::bombplane_proto::GameoverNotification::default_instance();
}
::bombplane_proto::GameoverNotification* Message::mutable_gameovernotification() {
  if (!has_gameovernotification()) {
    clear_body();
    set_has_gameovernotification();
    body_.gameovernotification_ = new ::bombplane_proto::GameoverNotification;
  }
  // @@protoc_insertion_point(field_mutable:bombplane_proto.Message.gameovernotification)
  return body_.gameovernotification_;
}
::bombplane_proto::GameoverNotification* Message::release_gameovernotification() {
  // @@protoc_insertion_point(field_release:bombplane_proto.Message.gameovernotification)
  if (has_gameovernotification()) {
    clear_has_body();
    ::bombplane_proto::GameoverNotification* temp = body_.gameovernotification_;
    body_.gameovernotification_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Message::set_allocated_gameovernotification(::bombplane_proto::GameoverNotification* gameovernotification) {
  clear_body();
  if (gameovernotification) {
    set_has_gameovernotification();
    body_.gameovernotification_ = gameovernotification;
  }
  // @@protoc_insertion_point(field_set_allocated:bombplane_proto.Message.gameovernotification)
}

// optional .bombplane_proto.GamecrushNotification gamecrushnotification = 410;
bool Message::has_gamecrushnotification() const {
  return body_case() == kGamecrushnotification;
}
void Message::set_has_gamecrushnotification() {
  _oneof_case_[0] = kGamecrushnotification;
}
void Message::clear_gamecrushnotification() {
  if (has_gamecrushnotification()) {
    delete body_.gamecrushnotification_;
    clear_has_body();
  }
}
 const ::bombplane_proto::GamecrushNotification& Message::gamecrushnotification() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.Message.gamecrushnotification)
  return has_gamecrushnotification()
      ? *body_.gamecrushnotification_
      : ::bombplane_proto::GamecrushNotification::default_instance();
}
::bombplane_proto::GamecrushNotification* Message::mutable_gamecrushnotification() {
  if (!has_gamecrushnotification()) {
    clear_body();
    set_has_gamecrushnotification();
    body_.gamecrushnotification_ = new ::bombplane_proto::GamecrushNotification;
  }
  // @@protoc_insertion_point(field_mutable:bombplane_proto.Message.gamecrushnotification)
  return body_.gamecrushnotification_;
}
::bombplane_proto::GamecrushNotification* Message::release_gamecrushnotification() {
  // @@protoc_insertion_point(field_release:bombplane_proto.Message.gamecrushnotification)
  if (has_gamecrushnotification()) {
    clear_has_body();
    ::bombplane_proto::GamecrushNotification* temp = body_.gamecrushnotification_;
    body_.gamecrushnotification_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Message::set_allocated_gamecrushnotification(::bombplane_proto::GamecrushNotification* gamecrushnotification) {
  clear_body();
  if (gamecrushnotification) {
    set_has_gamecrushnotification();
    body_.gamecrushnotification_ = gamecrushnotification;
  }
  // @@protoc_insertion_point(field_set_allocated:bombplane_proto.Message.gamecrushnotification)
}

bool Message::has_body() const {
  return body_case() != BODY_NOT_SET;
}
void Message::clear_has_body() {
  _oneof_case_[0] = BODY_NOT_SET;
}
Message::BodyCase Message::body_case() const {
  return Message::BodyCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginRequest::kUsernameFieldNumber;
const int LoginRequest::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginRequest::LoginRequest()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bombplane_proto.LoginRequest)
}

void LoginRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LoginRequest::LoginRequest(const LoginRequest& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bombplane_proto.LoginRequest)
}

void LoginRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:bombplane_proto.LoginRequest)
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LoginRequest& LoginRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_BombPlane_5fproto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_BombPlane_5fproto_2eproto();
#endif
  return *default_instance_;
}

LoginRequest* LoginRequest::default_instance_ = NULL;

LoginRequest* LoginRequest::New(::google::protobuf::Arena* arena) const {
  LoginRequest* n = new LoginRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bombplane_proto.LoginRequest)
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bombplane_proto.LoginRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes username = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_username()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional bytes password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bombplane_proto.LoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bombplane_proto.LoginRequest)
  return false;
#undef DO_
}

void LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bombplane_proto.LoginRequest)
  // optional bytes username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->username(), output);
  }

  // optional bytes password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->password(), output);
  }

  // @@protoc_insertion_point(serialize_end:bombplane_proto.LoginRequest)
}

int LoginRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bombplane_proto.LoginRequest)
  int total_size = 0;

  // optional bytes username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->username());
  }

  // optional bytes password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->password());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LoginRequest*>(&from));
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bombplane_proto.LoginRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bombplane_proto.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {

  return true;
}

void LoginRequest::Swap(LoginRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRequest::InternalSwap(LoginRequest* other) {
  username_.Swap(&other->username_);
  password_.Swap(&other->password_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LoginRequest::GetTypeName() const {
  return "bombplane_proto.LoginRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginRequest

// optional bytes username = 1;
void LoginRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LoginRequest::username() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.LoginRequest.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bombplane_proto.LoginRequest.username)
}
 void LoginRequest::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bombplane_proto.LoginRequest.username)
}
 void LoginRequest::set_username(const void* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bombplane_proto.LoginRequest.username)
}
 ::std::string* LoginRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:bombplane_proto.LoginRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginRequest::release_username() {
  // @@protoc_insertion_point(field_release:bombplane_proto.LoginRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:bombplane_proto.LoginRequest.username)
}

// optional bytes password = 2;
void LoginRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LoginRequest::password() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.LoginRequest.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bombplane_proto.LoginRequest.password)
}
 void LoginRequest::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bombplane_proto.LoginRequest.password)
}
 void LoginRequest::set_password(const void* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bombplane_proto.LoginRequest.password)
}
 ::std::string* LoginRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:bombplane_proto.LoginRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginRequest::release_password() {
  // @@protoc_insertion_point(field_release:bombplane_proto.LoginRequest.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:bombplane_proto.LoginRequest.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

bool LoginResponse_LoginState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LoginResponse_LoginState LoginResponse::SUCCESS;
const LoginResponse_LoginState LoginResponse::SUCCESS_KICK;
const LoginResponse_LoginState LoginResponse::NOT_EXIST;
const LoginResponse_LoginState LoginResponse::WRONG_PASSWORD;
const LoginResponse_LoginState LoginResponse::SERVER_ERROR;
const LoginResponse_LoginState LoginResponse::LoginState_MIN;
const LoginResponse_LoginState LoginResponse::LoginState_MAX;
const int LoginResponse::LoginState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginResponse::kStateFieldNumber;
const int LoginResponse::kUseridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginResponse::LoginResponse()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bombplane_proto.LoginResponse)
}

void LoginResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LoginResponse::LoginResponse(const LoginResponse& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bombplane_proto.LoginResponse)
}

void LoginResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  state_ = 0;
  userid_ = 0;
}

LoginResponse::~LoginResponse() {
  // @@protoc_insertion_point(destructor:bombplane_proto.LoginResponse)
  SharedDtor();
}

void LoginResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LoginResponse& LoginResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_BombPlane_5fproto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_BombPlane_5fproto_2eproto();
#endif
  return *default_instance_;
}

LoginResponse* LoginResponse::default_instance_ = NULL;

LoginResponse* LoginResponse::New(::google::protobuf::Arena* arena) const {
  LoginResponse* n = new LoginResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bombplane_proto.LoginResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LoginResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LoginResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(state_, userid_);

#undef ZR_HELPER_
#undef ZR_

}

bool LoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bombplane_proto.LoginResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bombplane_proto.LoginResponse.LoginState state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::bombplane_proto::LoginResponse_LoginState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }

      // optional int32 userid = 2;
      case 2: {
        if (tag == 16) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bombplane_proto.LoginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bombplane_proto.LoginResponse)
  return false;
#undef DO_
}

void LoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bombplane_proto.LoginResponse)
  // optional .bombplane_proto.LoginResponse.LoginState state = 1;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // optional int32 userid = 2;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  // @@protoc_insertion_point(serialize_end:bombplane_proto.LoginResponse)
}

int LoginResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bombplane_proto.LoginResponse)
  int total_size = 0;

  // optional .bombplane_proto.LoginResponse.LoginState state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  // optional int32 userid = 2;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LoginResponse*>(&from));
}

void LoginResponse::MergeFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bombplane_proto.LoginResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bombplane_proto.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {

  return true;
}

void LoginResponse::Swap(LoginResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginResponse::InternalSwap(LoginResponse* other) {
  std::swap(state_, other->state_);
  std::swap(userid_, other->userid_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LoginResponse::GetTypeName() const {
  return "bombplane_proto.LoginResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginResponse

// optional .bombplane_proto.LoginResponse.LoginState state = 1;
void LoginResponse::clear_state() {
  state_ = 0;
}
 ::bombplane_proto::LoginResponse_LoginState LoginResponse::state() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.LoginResponse.state)
  return static_cast< ::bombplane_proto::LoginResponse_LoginState >(state_);
}
 void LoginResponse::set_state(::bombplane_proto::LoginResponse_LoginState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:bombplane_proto.LoginResponse.state)
}

// optional int32 userid = 2;
void LoginResponse::clear_userid() {
  userid_ = 0;
}
 ::google::protobuf::int32 LoginResponse::userid() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.LoginResponse.userid)
  return userid_;
}
 void LoginResponse::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:bombplane_proto.LoginResponse.userid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OnlineUser::kUsernameFieldNumber;
const int OnlineUser::kUseridFieldNumber;
const int OnlineUser::kInroomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OnlineUser::OnlineUser()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bombplane_proto.OnlineUser)
}

void OnlineUser::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

OnlineUser::OnlineUser(const OnlineUser& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bombplane_proto.OnlineUser)
}

void OnlineUser::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_ = 0;
  inroom_ = false;
}

OnlineUser::~OnlineUser() {
  // @@protoc_insertion_point(destructor:bombplane_proto.OnlineUser)
  SharedDtor();
}

void OnlineUser::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void OnlineUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OnlineUser& OnlineUser::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_BombPlane_5fproto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_BombPlane_5fproto_2eproto();
#endif
  return *default_instance_;
}

OnlineUser* OnlineUser::default_instance_ = NULL;

OnlineUser* OnlineUser::New(::google::protobuf::Arena* arena) const {
  OnlineUser* n = new OnlineUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OnlineUser::Clear() {
// @@protoc_insertion_point(message_clear_start:bombplane_proto.OnlineUser)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(OnlineUser, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<OnlineUser*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(userid_, inroom_);
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool OnlineUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bombplane_proto.OnlineUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes username = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_username()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }

      // optional int32 userid = 2;
      case 2: {
        if (tag == 16) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_inroom;
        break;
      }

      // optional bool inroom = 3;
      case 3: {
        if (tag == 24) {
         parse_inroom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inroom_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bombplane_proto.OnlineUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bombplane_proto.OnlineUser)
  return false;
#undef DO_
}

void OnlineUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bombplane_proto.OnlineUser)
  // optional bytes username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->username(), output);
  }

  // optional int32 userid = 2;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  // optional bool inroom = 3;
  if (this->inroom() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->inroom(), output);
  }

  // @@protoc_insertion_point(serialize_end:bombplane_proto.OnlineUser)
}

int OnlineUser::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bombplane_proto.OnlineUser)
  int total_size = 0;

  // optional bytes username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->username());
  }

  // optional int32 userid = 2;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  // optional bool inroom = 3;
  if (this->inroom() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnlineUser::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OnlineUser*>(&from));
}

void OnlineUser::MergeFrom(const OnlineUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bombplane_proto.OnlineUser)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.inroom() != 0) {
    set_inroom(from.inroom());
  }
}

void OnlineUser::CopyFrom(const OnlineUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bombplane_proto.OnlineUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlineUser::IsInitialized() const {

  return true;
}

void OnlineUser::Swap(OnlineUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OnlineUser::InternalSwap(OnlineUser* other) {
  username_.Swap(&other->username_);
  std::swap(userid_, other->userid_);
  std::swap(inroom_, other->inroom_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string OnlineUser::GetTypeName() const {
  return "bombplane_proto.OnlineUser";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OnlineUser

// optional bytes username = 1;
void OnlineUser::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& OnlineUser::username() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.OnlineUser.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OnlineUser::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bombplane_proto.OnlineUser.username)
}
 void OnlineUser::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bombplane_proto.OnlineUser.username)
}
 void OnlineUser::set_username(const void* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bombplane_proto.OnlineUser.username)
}
 ::std::string* OnlineUser::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:bombplane_proto.OnlineUser.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OnlineUser::release_username() {
  // @@protoc_insertion_point(field_release:bombplane_proto.OnlineUser.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OnlineUser::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:bombplane_proto.OnlineUser.username)
}

// optional int32 userid = 2;
void OnlineUser::clear_userid() {
  userid_ = 0;
}
 ::google::protobuf::int32 OnlineUser::userid() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.OnlineUser.userid)
  return userid_;
}
 void OnlineUser::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:bombplane_proto.OnlineUser.userid)
}

// optional bool inroom = 3;
void OnlineUser::clear_inroom() {
  inroom_ = false;
}
 bool OnlineUser::inroom() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.OnlineUser.inroom)
  return inroom_;
}
 void OnlineUser::set_inroom(bool value) {
  
  inroom_ = value;
  // @@protoc_insertion_point(field_set:bombplane_proto.OnlineUser.inroom)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OnlinelistNotification::kOnlinelistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OnlinelistNotification::OnlinelistNotification()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bombplane_proto.OnlinelistNotification)
}

void OnlinelistNotification::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

OnlinelistNotification::OnlinelistNotification(const OnlinelistNotification& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bombplane_proto.OnlinelistNotification)
}

void OnlinelistNotification::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

OnlinelistNotification::~OnlinelistNotification() {
  // @@protoc_insertion_point(destructor:bombplane_proto.OnlinelistNotification)
  SharedDtor();
}

void OnlinelistNotification::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void OnlinelistNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OnlinelistNotification& OnlinelistNotification::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_BombPlane_5fproto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_BombPlane_5fproto_2eproto();
#endif
  return *default_instance_;
}

OnlinelistNotification* OnlinelistNotification::default_instance_ = NULL;

OnlinelistNotification* OnlinelistNotification::New(::google::protobuf::Arena* arena) const {
  OnlinelistNotification* n = new OnlinelistNotification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OnlinelistNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bombplane_proto.OnlinelistNotification)
  onlinelist_.Clear();
}

bool OnlinelistNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bombplane_proto.OnlinelistNotification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bombplane_proto.OnlineUser onlinelist = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_onlinelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_onlinelist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_onlinelist;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bombplane_proto.OnlinelistNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bombplane_proto.OnlinelistNotification)
  return false;
#undef DO_
}

void OnlinelistNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bombplane_proto.OnlinelistNotification)
  // repeated .bombplane_proto.OnlineUser onlinelist = 1;
  for (unsigned int i = 0, n = this->onlinelist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->onlinelist(i), output);
  }

  // @@protoc_insertion_point(serialize_end:bombplane_proto.OnlinelistNotification)
}

int OnlinelistNotification::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bombplane_proto.OnlinelistNotification)
  int total_size = 0;

  // repeated .bombplane_proto.OnlineUser onlinelist = 1;
  total_size += 1 * this->onlinelist_size();
  for (int i = 0; i < this->onlinelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->onlinelist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnlinelistNotification::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OnlinelistNotification*>(&from));
}

void OnlinelistNotification::MergeFrom(const OnlinelistNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bombplane_proto.OnlinelistNotification)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  onlinelist_.MergeFrom(from.onlinelist_);
}

void OnlinelistNotification::CopyFrom(const OnlinelistNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bombplane_proto.OnlinelistNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlinelistNotification::IsInitialized() const {

  return true;
}

void OnlinelistNotification::Swap(OnlinelistNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OnlinelistNotification::InternalSwap(OnlinelistNotification* other) {
  onlinelist_.UnsafeArenaSwap(&other->onlinelist_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string OnlinelistNotification::GetTypeName() const {
  return "bombplane_proto.OnlinelistNotification";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OnlinelistNotification

// repeated .bombplane_proto.OnlineUser onlinelist = 1;
int OnlinelistNotification::onlinelist_size() const {
  return onlinelist_.size();
}
void OnlinelistNotification::clear_onlinelist() {
  onlinelist_.Clear();
}
const ::bombplane_proto::OnlineUser& OnlinelistNotification::onlinelist(int index) const {
  // @@protoc_insertion_point(field_get:bombplane_proto.OnlinelistNotification.onlinelist)
  return onlinelist_.Get(index);
}
::bombplane_proto::OnlineUser* OnlinelistNotification::mutable_onlinelist(int index) {
  // @@protoc_insertion_point(field_mutable:bombplane_proto.OnlinelistNotification.onlinelist)
  return onlinelist_.Mutable(index);
}
::bombplane_proto::OnlineUser* OnlinelistNotification::add_onlinelist() {
  // @@protoc_insertion_point(field_add:bombplane_proto.OnlinelistNotification.onlinelist)
  return onlinelist_.Add();
}
::google::protobuf::RepeatedPtrField< ::bombplane_proto::OnlineUser >*
OnlinelistNotification::mutable_onlinelist() {
  // @@protoc_insertion_point(field_mutable_list:bombplane_proto.OnlinelistNotification.onlinelist)
  return &onlinelist_;
}
const ::google::protobuf::RepeatedPtrField< ::bombplane_proto::OnlineUser >&
OnlinelistNotification::onlinelist() const {
  // @@protoc_insertion_point(field_list:bombplane_proto.OnlinelistNotification.onlinelist)
  return onlinelist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateonlineBroadcast::kUsernameFieldNumber;
const int UpdateonlineBroadcast::kUseridFieldNumber;
const int UpdateonlineBroadcast::kOnlineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateonlineBroadcast::UpdateonlineBroadcast()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bombplane_proto.UpdateonlineBroadcast)
}

void UpdateonlineBroadcast::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UpdateonlineBroadcast::UpdateonlineBroadcast(const UpdateonlineBroadcast& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bombplane_proto.UpdateonlineBroadcast)
}

void UpdateonlineBroadcast::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_ = 0;
  online_ = false;
}

UpdateonlineBroadcast::~UpdateonlineBroadcast() {
  // @@protoc_insertion_point(destructor:bombplane_proto.UpdateonlineBroadcast)
  SharedDtor();
}

void UpdateonlineBroadcast::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UpdateonlineBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UpdateonlineBroadcast& UpdateonlineBroadcast::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_BombPlane_5fproto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_BombPlane_5fproto_2eproto();
#endif
  return *default_instance_;
}

UpdateonlineBroadcast* UpdateonlineBroadcast::default_instance_ = NULL;

UpdateonlineBroadcast* UpdateonlineBroadcast::New(::google::protobuf::Arena* arena) const {
  UpdateonlineBroadcast* n = new UpdateonlineBroadcast;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateonlineBroadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:bombplane_proto.UpdateonlineBroadcast)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UpdateonlineBroadcast, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UpdateonlineBroadcast*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(userid_, online_);
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool UpdateonlineBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bombplane_proto.UpdateonlineBroadcast)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes username = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_username()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }

      // optional int32 userid = 2;
      case 2: {
        if (tag == 16) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_online;
        break;
      }

      // optional bool online = 3;
      case 3: {
        if (tag == 24) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bombplane_proto.UpdateonlineBroadcast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bombplane_proto.UpdateonlineBroadcast)
  return false;
#undef DO_
}

void UpdateonlineBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bombplane_proto.UpdateonlineBroadcast)
  // optional bytes username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->username(), output);
  }

  // optional int32 userid = 2;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  // optional bool online = 3;
  if (this->online() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->online(), output);
  }

  // @@protoc_insertion_point(serialize_end:bombplane_proto.UpdateonlineBroadcast)
}

int UpdateonlineBroadcast::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bombplane_proto.UpdateonlineBroadcast)
  int total_size = 0;

  // optional bytes username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->username());
  }

  // optional int32 userid = 2;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  // optional bool online = 3;
  if (this->online() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateonlineBroadcast::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UpdateonlineBroadcast*>(&from));
}

void UpdateonlineBroadcast::MergeFrom(const UpdateonlineBroadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bombplane_proto.UpdateonlineBroadcast)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.online() != 0) {
    set_online(from.online());
  }
}

void UpdateonlineBroadcast::CopyFrom(const UpdateonlineBroadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bombplane_proto.UpdateonlineBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateonlineBroadcast::IsInitialized() const {

  return true;
}

void UpdateonlineBroadcast::Swap(UpdateonlineBroadcast* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateonlineBroadcast::InternalSwap(UpdateonlineBroadcast* other) {
  username_.Swap(&other->username_);
  std::swap(userid_, other->userid_);
  std::swap(online_, other->online_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UpdateonlineBroadcast::GetTypeName() const {
  return "bombplane_proto.UpdateonlineBroadcast";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateonlineBroadcast

// optional bytes username = 1;
void UpdateonlineBroadcast::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UpdateonlineBroadcast::username() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.UpdateonlineBroadcast.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpdateonlineBroadcast::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bombplane_proto.UpdateonlineBroadcast.username)
}
 void UpdateonlineBroadcast::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bombplane_proto.UpdateonlineBroadcast.username)
}
 void UpdateonlineBroadcast::set_username(const void* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bombplane_proto.UpdateonlineBroadcast.username)
}
 ::std::string* UpdateonlineBroadcast::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:bombplane_proto.UpdateonlineBroadcast.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UpdateonlineBroadcast::release_username() {
  // @@protoc_insertion_point(field_release:bombplane_proto.UpdateonlineBroadcast.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpdateonlineBroadcast::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:bombplane_proto.UpdateonlineBroadcast.username)
}

// optional int32 userid = 2;
void UpdateonlineBroadcast::clear_userid() {
  userid_ = 0;
}
 ::google::protobuf::int32 UpdateonlineBroadcast::userid() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.UpdateonlineBroadcast.userid)
  return userid_;
}
 void UpdateonlineBroadcast::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:bombplane_proto.UpdateonlineBroadcast.userid)
}

// optional bool online = 3;
void UpdateonlineBroadcast::clear_online() {
  online_ = false;
}
 bool UpdateonlineBroadcast::online() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.UpdateonlineBroadcast.online)
  return online_;
}
 void UpdateonlineBroadcast::set_online(bool value) {
  
  online_ = value;
  // @@protoc_insertion_point(field_set:bombplane_proto.UpdateonlineBroadcast.online)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InviteRequest::kSrcuseridFieldNumber;
const int InviteRequest::kDstuseridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InviteRequest::InviteRequest()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bombplane_proto.InviteRequest)
}

void InviteRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

InviteRequest::InviteRequest(const InviteRequest& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bombplane_proto.InviteRequest)
}

void InviteRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  srcuserid_ = 0;
  dstuserid_ = 0;
}

InviteRequest::~InviteRequest() {
  // @@protoc_insertion_point(destructor:bombplane_proto.InviteRequest)
  SharedDtor();
}

void InviteRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InviteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InviteRequest& InviteRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_BombPlane_5fproto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_BombPlane_5fproto_2eproto();
#endif
  return *default_instance_;
}

InviteRequest* InviteRequest::default_instance_ = NULL;

InviteRequest* InviteRequest::New(::google::protobuf::Arena* arena) const {
  InviteRequest* n = new InviteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InviteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bombplane_proto.InviteRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(InviteRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<InviteRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(srcuserid_, dstuserid_);

#undef ZR_HELPER_
#undef ZR_

}

bool InviteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bombplane_proto.InviteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 srcuserid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &srcuserid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dstuserid;
        break;
      }

      // optional int32 dstuserid = 2;
      case 2: {
        if (tag == 16) {
         parse_dstuserid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dstuserid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bombplane_proto.InviteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bombplane_proto.InviteRequest)
  return false;
#undef DO_
}

void InviteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bombplane_proto.InviteRequest)
  // optional int32 srcuserid = 1;
  if (this->srcuserid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->srcuserid(), output);
  }

  // optional int32 dstuserid = 2;
  if (this->dstuserid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dstuserid(), output);
  }

  // @@protoc_insertion_point(serialize_end:bombplane_proto.InviteRequest)
}

int InviteRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bombplane_proto.InviteRequest)
  int total_size = 0;

  // optional int32 srcuserid = 1;
  if (this->srcuserid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->srcuserid());
  }

  // optional int32 dstuserid = 2;
  if (this->dstuserid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dstuserid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InviteRequest*>(&from));
}

void InviteRequest::MergeFrom(const InviteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bombplane_proto.InviteRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.srcuserid() != 0) {
    set_srcuserid(from.srcuserid());
  }
  if (from.dstuserid() != 0) {
    set_dstuserid(from.dstuserid());
  }
}

void InviteRequest::CopyFrom(const InviteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bombplane_proto.InviteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteRequest::IsInitialized() const {

  return true;
}

void InviteRequest::Swap(InviteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InviteRequest::InternalSwap(InviteRequest* other) {
  std::swap(srcuserid_, other->srcuserid_);
  std::swap(dstuserid_, other->dstuserid_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string InviteRequest::GetTypeName() const {
  return "bombplane_proto.InviteRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InviteRequest

// optional int32 srcuserid = 1;
void InviteRequest::clear_srcuserid() {
  srcuserid_ = 0;
}
 ::google::protobuf::int32 InviteRequest::srcuserid() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.InviteRequest.srcuserid)
  return srcuserid_;
}
 void InviteRequest::set_srcuserid(::google::protobuf::int32 value) {
  
  srcuserid_ = value;
  // @@protoc_insertion_point(field_set:bombplane_proto.InviteRequest.srcuserid)
}

// optional int32 dstuserid = 2;
void InviteRequest::clear_dstuserid() {
  dstuserid_ = 0;
}
 ::google::protobuf::int32 InviteRequest::dstuserid() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.InviteRequest.dstuserid)
  return dstuserid_;
}
 void InviteRequest::set_dstuserid(::google::protobuf::int32 value) {
  
  dstuserid_ = value;
  // @@protoc_insertion_point(field_set:bombplane_proto.InviteRequest.dstuserid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InviteResponse::kSrcuseridFieldNumber;
const int InviteResponse::kAcceptFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InviteResponse::InviteResponse()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bombplane_proto.InviteResponse)
}

void InviteResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

InviteResponse::InviteResponse(const InviteResponse& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bombplane_proto.InviteResponse)
}

void InviteResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  srcuserid_ = 0;
  accept_ = false;
}

InviteResponse::~InviteResponse() {
  // @@protoc_insertion_point(destructor:bombplane_proto.InviteResponse)
  SharedDtor();
}

void InviteResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InviteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InviteResponse& InviteResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_BombPlane_5fproto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_BombPlane_5fproto_2eproto();
#endif
  return *default_instance_;
}

InviteResponse* InviteResponse::default_instance_ = NULL;

InviteResponse* InviteResponse::New(::google::protobuf::Arena* arena) const {
  InviteResponse* n = new InviteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InviteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bombplane_proto.InviteResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(InviteResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<InviteResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(srcuserid_, accept_);

#undef ZR_HELPER_
#undef ZR_

}

bool InviteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bombplane_proto.InviteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 srcuserid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &srcuserid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_accept;
        break;
      }

      // optional bool accept = 2;
      case 2: {
        if (tag == 16) {
         parse_accept:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accept_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bombplane_proto.InviteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bombplane_proto.InviteResponse)
  return false;
#undef DO_
}

void InviteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bombplane_proto.InviteResponse)
  // optional int32 srcuserid = 1;
  if (this->srcuserid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->srcuserid(), output);
  }

  // optional bool accept = 2;
  if (this->accept() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->accept(), output);
  }

  // @@protoc_insertion_point(serialize_end:bombplane_proto.InviteResponse)
}

int InviteResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bombplane_proto.InviteResponse)
  int total_size = 0;

  // optional int32 srcuserid = 1;
  if (this->srcuserid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->srcuserid());
  }

  // optional bool accept = 2;
  if (this->accept() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InviteResponse*>(&from));
}

void InviteResponse::MergeFrom(const InviteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bombplane_proto.InviteResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.srcuserid() != 0) {
    set_srcuserid(from.srcuserid());
  }
  if (from.accept() != 0) {
    set_accept(from.accept());
  }
}

void InviteResponse::CopyFrom(const InviteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bombplane_proto.InviteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteResponse::IsInitialized() const {

  return true;
}

void InviteResponse::Swap(InviteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InviteResponse::InternalSwap(InviteResponse* other) {
  std::swap(srcuserid_, other->srcuserid_);
  std::swap(accept_, other->accept_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string InviteResponse::GetTypeName() const {
  return "bombplane_proto.InviteResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InviteResponse

// optional int32 srcuserid = 1;
void InviteResponse::clear_srcuserid() {
  srcuserid_ = 0;
}
 ::google::protobuf::int32 InviteResponse::srcuserid() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.InviteResponse.srcuserid)
  return srcuserid_;
}
 void InviteResponse::set_srcuserid(::google::protobuf::int32 value) {
  
  srcuserid_ = value;
  // @@protoc_insertion_point(field_set:bombplane_proto.InviteResponse.srcuserid)
}

// optional bool accept = 2;
void InviteResponse::clear_accept() {
  accept_ = false;
}
 bool InviteResponse::accept() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.InviteResponse.accept)
  return accept_;
}
 void InviteResponse::set_accept(bool value) {
  
  accept_ = value;
  // @@protoc_insertion_point(field_set:bombplane_proto.InviteResponse.accept)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateroomBroadcast::kUserid1FieldNumber;
const int UpdateroomBroadcast::kUserid2FieldNumber;
const int UpdateroomBroadcast::kInoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateroomBroadcast::UpdateroomBroadcast()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bombplane_proto.UpdateroomBroadcast)
}

void UpdateroomBroadcast::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UpdateroomBroadcast::UpdateroomBroadcast(const UpdateroomBroadcast& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bombplane_proto.UpdateroomBroadcast)
}

void UpdateroomBroadcast::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  userid1_ = 0;
  userid2_ = 0;
  inout_ = false;
}

UpdateroomBroadcast::~UpdateroomBroadcast() {
  // @@protoc_insertion_point(destructor:bombplane_proto.UpdateroomBroadcast)
  SharedDtor();
}

void UpdateroomBroadcast::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UpdateroomBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UpdateroomBroadcast& UpdateroomBroadcast::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_BombPlane_5fproto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_BombPlane_5fproto_2eproto();
#endif
  return *default_instance_;
}

UpdateroomBroadcast* UpdateroomBroadcast::default_instance_ = NULL;

UpdateroomBroadcast* UpdateroomBroadcast::New(::google::protobuf::Arena* arena) const {
  UpdateroomBroadcast* n = new UpdateroomBroadcast;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateroomBroadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:bombplane_proto.UpdateroomBroadcast)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UpdateroomBroadcast, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UpdateroomBroadcast*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(userid1_, inout_);

#undef ZR_HELPER_
#undef ZR_

}

bool UpdateroomBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bombplane_proto.UpdateroomBroadcast)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid1_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_userid2;
        break;
      }

      // optional int32 userid2 = 2;
      case 2: {
        if (tag == 16) {
         parse_userid2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid2_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_inout;
        break;
      }

      // optional bool inout = 3;
      case 3: {
        if (tag == 24) {
         parse_inout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inout_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bombplane_proto.UpdateroomBroadcast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bombplane_proto.UpdateroomBroadcast)
  return false;
#undef DO_
}

void UpdateroomBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bombplane_proto.UpdateroomBroadcast)
  // optional int32 userid1 = 1;
  if (this->userid1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid1(), output);
  }

  // optional int32 userid2 = 2;
  if (this->userid2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid2(), output);
  }

  // optional bool inout = 3;
  if (this->inout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->inout(), output);
  }

  // @@protoc_insertion_point(serialize_end:bombplane_proto.UpdateroomBroadcast)
}

int UpdateroomBroadcast::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bombplane_proto.UpdateroomBroadcast)
  int total_size = 0;

  // optional int32 userid1 = 1;
  if (this->userid1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid1());
  }

  // optional int32 userid2 = 2;
  if (this->userid2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid2());
  }

  // optional bool inout = 3;
  if (this->inout() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateroomBroadcast::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UpdateroomBroadcast*>(&from));
}

void UpdateroomBroadcast::MergeFrom(const UpdateroomBroadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bombplane_proto.UpdateroomBroadcast)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.userid1() != 0) {
    set_userid1(from.userid1());
  }
  if (from.userid2() != 0) {
    set_userid2(from.userid2());
  }
  if (from.inout() != 0) {
    set_inout(from.inout());
  }
}

void UpdateroomBroadcast::CopyFrom(const UpdateroomBroadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bombplane_proto.UpdateroomBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateroomBroadcast::IsInitialized() const {

  return true;
}

void UpdateroomBroadcast::Swap(UpdateroomBroadcast* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateroomBroadcast::InternalSwap(UpdateroomBroadcast* other) {
  std::swap(userid1_, other->userid1_);
  std::swap(userid2_, other->userid2_);
  std::swap(inout_, other->inout_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UpdateroomBroadcast::GetTypeName() const {
  return "bombplane_proto.UpdateroomBroadcast";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateroomBroadcast

// optional int32 userid1 = 1;
void UpdateroomBroadcast::clear_userid1() {
  userid1_ = 0;
}
 ::google::protobuf::int32 UpdateroomBroadcast::userid1() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.UpdateroomBroadcast.userid1)
  return userid1_;
}
 void UpdateroomBroadcast::set_userid1(::google::protobuf::int32 value) {
  
  userid1_ = value;
  // @@protoc_insertion_point(field_set:bombplane_proto.UpdateroomBroadcast.userid1)
}

// optional int32 userid2 = 2;
void UpdateroomBroadcast::clear_userid2() {
  userid2_ = 0;
}
 ::google::protobuf::int32 UpdateroomBroadcast::userid2() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.UpdateroomBroadcast.userid2)
  return userid2_;
}
 void UpdateroomBroadcast::set_userid2(::google::protobuf::int32 value) {
  
  userid2_ = value;
  // @@protoc_insertion_point(field_set:bombplane_proto.UpdateroomBroadcast.userid2)
}

// optional bool inout = 3;
void UpdateroomBroadcast::clear_inout() {
  inout_ = false;
}
 bool UpdateroomBroadcast::inout() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.UpdateroomBroadcast.inout)
  return inout_;
}
 void UpdateroomBroadcast::set_inout(bool value) {
  
  inout_ = value;
  // @@protoc_insertion_point(field_set:bombplane_proto.UpdateroomBroadcast.inout)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Coordinate::kXFieldNumber;
const int Coordinate::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Coordinate::Coordinate()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bombplane_proto.Coordinate)
}

void Coordinate::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Coordinate::Coordinate(const Coordinate& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bombplane_proto.Coordinate)
}

void Coordinate::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
}

Coordinate::~Coordinate() {
  // @@protoc_insertion_point(destructor:bombplane_proto.Coordinate)
  SharedDtor();
}

void Coordinate::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Coordinate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Coordinate& Coordinate::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_BombPlane_5fproto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_BombPlane_5fproto_2eproto();
#endif
  return *default_instance_;
}

Coordinate* Coordinate::default_instance_ = NULL;

Coordinate* Coordinate::New(::google::protobuf::Arena* arena) const {
  Coordinate* n = new Coordinate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Coordinate::Clear() {
// @@protoc_insertion_point(message_clear_start:bombplane_proto.Coordinate)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Coordinate, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Coordinate*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);

#undef ZR_HELPER_
#undef ZR_

}

bool Coordinate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bombplane_proto.Coordinate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bombplane_proto.Coordinate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bombplane_proto.Coordinate)
  return false;
#undef DO_
}

void Coordinate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bombplane_proto.Coordinate)
  // optional int32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // @@protoc_insertion_point(serialize_end:bombplane_proto.Coordinate)
}

int Coordinate::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bombplane_proto.Coordinate)
  int total_size = 0;

  // optional int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Coordinate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Coordinate*>(&from));
}

void Coordinate::MergeFrom(const Coordinate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bombplane_proto.Coordinate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Coordinate::CopyFrom(const Coordinate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bombplane_proto.Coordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coordinate::IsInitialized() const {

  return true;
}

void Coordinate::Swap(Coordinate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Coordinate::InternalSwap(Coordinate* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Coordinate::GetTypeName() const {
  return "bombplane_proto.Coordinate";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Coordinate

// optional int32 x = 1;
void Coordinate::clear_x() {
  x_ = 0;
}
 ::google::protobuf::int32 Coordinate::x() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.Coordinate.x)
  return x_;
}
 void Coordinate::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:bombplane_proto.Coordinate.x)
}

// optional int32 y = 2;
void Coordinate::clear_y() {
  y_ = 0;
}
 ::google::protobuf::int32 Coordinate::y() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.Coordinate.y)
  return y_;
}
 void Coordinate::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:bombplane_proto.Coordinate.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlaneLocator::kPos1FieldNumber;
const int PlaneLocator::kPos2FieldNumber;
const int PlaneLocator::kPos3FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlaneLocator::PlaneLocator()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bombplane_proto.PlaneLocator)
}

void PlaneLocator::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pos1_ = const_cast< ::bombplane_proto::Coordinate*>(
      ::bombplane_proto::Coordinate::internal_default_instance());
#else
  pos1_ = const_cast< ::bombplane_proto::Coordinate*>(&::bombplane_proto::Coordinate::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pos2_ = const_cast< ::bombplane_proto::Coordinate*>(
      ::bombplane_proto::Coordinate::internal_default_instance());
#else
  pos2_ = const_cast< ::bombplane_proto::Coordinate*>(&::bombplane_proto::Coordinate::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pos3_ = const_cast< ::bombplane_proto::Coordinate*>(
      ::bombplane_proto::Coordinate::internal_default_instance());
#else
  pos3_ = const_cast< ::bombplane_proto::Coordinate*>(&::bombplane_proto::Coordinate::default_instance());
#endif
}

PlaneLocator::PlaneLocator(const PlaneLocator& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bombplane_proto.PlaneLocator)
}

void PlaneLocator::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  pos1_ = NULL;
  pos2_ = NULL;
  pos3_ = NULL;
}

PlaneLocator::~PlaneLocator() {
  // @@protoc_insertion_point(destructor:bombplane_proto.PlaneLocator)
  SharedDtor();
}

void PlaneLocator::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete pos1_;
    delete pos2_;
    delete pos3_;
  }
}

void PlaneLocator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlaneLocator& PlaneLocator::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_BombPlane_5fproto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_BombPlane_5fproto_2eproto();
#endif
  return *default_instance_;
}

PlaneLocator* PlaneLocator::default_instance_ = NULL;

PlaneLocator* PlaneLocator::New(::google::protobuf::Arena* arena) const {
  PlaneLocator* n = new PlaneLocator;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlaneLocator::Clear() {
// @@protoc_insertion_point(message_clear_start:bombplane_proto.PlaneLocator)
  if (GetArenaNoVirtual() == NULL && pos1_ != NULL) delete pos1_;
  pos1_ = NULL;
  if (GetArenaNoVirtual() == NULL && pos2_ != NULL) delete pos2_;
  pos2_ = NULL;
  if (GetArenaNoVirtual() == NULL && pos3_ != NULL) delete pos3_;
  pos3_ = NULL;
}

bool PlaneLocator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bombplane_proto.PlaneLocator)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bombplane_proto.Coordinate pos1 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pos2;
        break;
      }

      // optional .bombplane_proto.Coordinate pos2 = 2;
      case 2: {
        if (tag == 18) {
         parse_pos2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pos3;
        break;
      }

      // optional .bombplane_proto.Coordinate pos3 = 3;
      case 3: {
        if (tag == 26) {
         parse_pos3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos3()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bombplane_proto.PlaneLocator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bombplane_proto.PlaneLocator)
  return false;
#undef DO_
}

void PlaneLocator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bombplane_proto.PlaneLocator)
  // optional .bombplane_proto.Coordinate pos1 = 1;
  if (this->has_pos1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->pos1_, output);
  }

  // optional .bombplane_proto.Coordinate pos2 = 2;
  if (this->has_pos2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->pos2_, output);
  }

  // optional .bombplane_proto.Coordinate pos3 = 3;
  if (this->has_pos3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->pos3_, output);
  }

  // @@protoc_insertion_point(serialize_end:bombplane_proto.PlaneLocator)
}

int PlaneLocator::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bombplane_proto.PlaneLocator)
  int total_size = 0;

  // optional .bombplane_proto.Coordinate pos1 = 1;
  if (this->has_pos1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos1_);
  }

  // optional .bombplane_proto.Coordinate pos2 = 2;
  if (this->has_pos2()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos2_);
  }

  // optional .bombplane_proto.Coordinate pos3 = 3;
  if (this->has_pos3()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos3_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlaneLocator::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlaneLocator*>(&from));
}

void PlaneLocator::MergeFrom(const PlaneLocator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bombplane_proto.PlaneLocator)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_pos1()) {
    mutable_pos1()->::bombplane_proto::Coordinate::MergeFrom(from.pos1());
  }
  if (from.has_pos2()) {
    mutable_pos2()->::bombplane_proto::Coordinate::MergeFrom(from.pos2());
  }
  if (from.has_pos3()) {
    mutable_pos3()->::bombplane_proto::Coordinate::MergeFrom(from.pos3());
  }
}

void PlaneLocator::CopyFrom(const PlaneLocator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bombplane_proto.PlaneLocator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaneLocator::IsInitialized() const {

  return true;
}

void PlaneLocator::Swap(PlaneLocator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlaneLocator::InternalSwap(PlaneLocator* other) {
  std::swap(pos1_, other->pos1_);
  std::swap(pos2_, other->pos2_);
  std::swap(pos3_, other->pos3_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PlaneLocator::GetTypeName() const {
  return "bombplane_proto.PlaneLocator";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlaneLocator

// optional .bombplane_proto.Coordinate pos1 = 1;
bool PlaneLocator::has_pos1() const {
  return !_is_default_instance_ && pos1_ != NULL;
}
void PlaneLocator::clear_pos1() {
  if (GetArenaNoVirtual() == NULL && pos1_ != NULL) delete pos1_;
  pos1_ = NULL;
}
const ::bombplane_proto::Coordinate& PlaneLocator::pos1() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.PlaneLocator.pos1)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return pos1_ != NULL ? *pos1_ : *default_instance().pos1_;
#else
  return pos1_ != NULL ? *pos1_ : *default_instance_->pos1_;
#endif
}
::bombplane_proto::Coordinate* PlaneLocator::mutable_pos1() {
  
  if (pos1_ == NULL) {
    pos1_ = new ::bombplane_proto::Coordinate;
  }
  // @@protoc_insertion_point(field_mutable:bombplane_proto.PlaneLocator.pos1)
  return pos1_;
}
::bombplane_proto::Coordinate* PlaneLocator::release_pos1() {
  // @@protoc_insertion_point(field_release:bombplane_proto.PlaneLocator.pos1)
  
  ::bombplane_proto::Coordinate* temp = pos1_;
  pos1_ = NULL;
  return temp;
}
void PlaneLocator::set_allocated_pos1(::bombplane_proto::Coordinate* pos1) {
  delete pos1_;
  pos1_ = pos1;
  if (pos1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bombplane_proto.PlaneLocator.pos1)
}

// optional .bombplane_proto.Coordinate pos2 = 2;
bool PlaneLocator::has_pos2() const {
  return !_is_default_instance_ && pos2_ != NULL;
}
void PlaneLocator::clear_pos2() {
  if (GetArenaNoVirtual() == NULL && pos2_ != NULL) delete pos2_;
  pos2_ = NULL;
}
const ::bombplane_proto::Coordinate& PlaneLocator::pos2() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.PlaneLocator.pos2)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return pos2_ != NULL ? *pos2_ : *default_instance().pos2_;
#else
  return pos2_ != NULL ? *pos2_ : *default_instance_->pos2_;
#endif
}
::bombplane_proto::Coordinate* PlaneLocator::mutable_pos2() {
  
  if (pos2_ == NULL) {
    pos2_ = new ::bombplane_proto::Coordinate;
  }
  // @@protoc_insertion_point(field_mutable:bombplane_proto.PlaneLocator.pos2)
  return pos2_;
}
::bombplane_proto::Coordinate* PlaneLocator::release_pos2() {
  // @@protoc_insertion_point(field_release:bombplane_proto.PlaneLocator.pos2)
  
  ::bombplane_proto::Coordinate* temp = pos2_;
  pos2_ = NULL;
  return temp;
}
void PlaneLocator::set_allocated_pos2(::bombplane_proto::Coordinate* pos2) {
  delete pos2_;
  pos2_ = pos2;
  if (pos2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bombplane_proto.PlaneLocator.pos2)
}

// optional .bombplane_proto.Coordinate pos3 = 3;
bool PlaneLocator::has_pos3() const {
  return !_is_default_instance_ && pos3_ != NULL;
}
void PlaneLocator::clear_pos3() {
  if (GetArenaNoVirtual() == NULL && pos3_ != NULL) delete pos3_;
  pos3_ = NULL;
}
const ::bombplane_proto::Coordinate& PlaneLocator::pos3() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.PlaneLocator.pos3)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return pos3_ != NULL ? *pos3_ : *default_instance().pos3_;
#else
  return pos3_ != NULL ? *pos3_ : *default_instance_->pos3_;
#endif
}
::bombplane_proto::Coordinate* PlaneLocator::mutable_pos3() {
  
  if (pos3_ == NULL) {
    pos3_ = new ::bombplane_proto::Coordinate;
  }
  // @@protoc_insertion_point(field_mutable:bombplane_proto.PlaneLocator.pos3)
  return pos3_;
}
::bombplane_proto::Coordinate* PlaneLocator::release_pos3() {
  // @@protoc_insertion_point(field_release:bombplane_proto.PlaneLocator.pos3)
  
  ::bombplane_proto::Coordinate* temp = pos3_;
  pos3_ = NULL;
  return temp;
}
void PlaneLocator::set_allocated_pos3(::bombplane_proto::Coordinate* pos3) {
  delete pos3_;
  pos3_ = pos3;
  if (pos3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bombplane_proto.PlaneLocator.pos3)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitposNotification::kLoc1FieldNumber;
const int InitposNotification::kLoc2FieldNumber;
const int InitposNotification::kLoc3FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitposNotification::InitposNotification()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bombplane_proto.InitposNotification)
}

void InitposNotification::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  loc1_ = const_cast< ::bombplane_proto::PlaneLocator*>(
      ::bombplane_proto::PlaneLocator::internal_default_instance());
#else
  loc1_ = const_cast< ::bombplane_proto::PlaneLocator*>(&::bombplane_proto::PlaneLocator::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  loc2_ = const_cast< ::bombplane_proto::PlaneLocator*>(
      ::bombplane_proto::PlaneLocator::internal_default_instance());
#else
  loc2_ = const_cast< ::bombplane_proto::PlaneLocator*>(&::bombplane_proto::PlaneLocator::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  loc3_ = const_cast< ::bombplane_proto::PlaneLocator*>(
      ::bombplane_proto::PlaneLocator::internal_default_instance());
#else
  loc3_ = const_cast< ::bombplane_proto::PlaneLocator*>(&::bombplane_proto::PlaneLocator::default_instance());
#endif
}

InitposNotification::InitposNotification(const InitposNotification& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bombplane_proto.InitposNotification)
}

void InitposNotification::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  loc1_ = NULL;
  loc2_ = NULL;
  loc3_ = NULL;
}

InitposNotification::~InitposNotification() {
  // @@protoc_insertion_point(destructor:bombplane_proto.InitposNotification)
  SharedDtor();
}

void InitposNotification::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete loc1_;
    delete loc2_;
    delete loc3_;
  }
}

void InitposNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InitposNotification& InitposNotification::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_BombPlane_5fproto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_BombPlane_5fproto_2eproto();
#endif
  return *default_instance_;
}

InitposNotification* InitposNotification::default_instance_ = NULL;

InitposNotification* InitposNotification::New(::google::protobuf::Arena* arena) const {
  InitposNotification* n = new InitposNotification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitposNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bombplane_proto.InitposNotification)
  if (GetArenaNoVirtual() == NULL && loc1_ != NULL) delete loc1_;
  loc1_ = NULL;
  if (GetArenaNoVirtual() == NULL && loc2_ != NULL) delete loc2_;
  loc2_ = NULL;
  if (GetArenaNoVirtual() == NULL && loc3_ != NULL) delete loc3_;
  loc3_ = NULL;
}

bool InitposNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bombplane_proto.InitposNotification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bombplane_proto.PlaneLocator loc1 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loc1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loc2;
        break;
      }

      // optional .bombplane_proto.PlaneLocator loc2 = 2;
      case 2: {
        if (tag == 18) {
         parse_loc2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loc2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loc3;
        break;
      }

      // optional .bombplane_proto.PlaneLocator loc3 = 3;
      case 3: {
        if (tag == 26) {
         parse_loc3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loc3()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bombplane_proto.InitposNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bombplane_proto.InitposNotification)
  return false;
#undef DO_
}

void InitposNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bombplane_proto.InitposNotification)
  // optional .bombplane_proto.PlaneLocator loc1 = 1;
  if (this->has_loc1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->loc1_, output);
  }

  // optional .bombplane_proto.PlaneLocator loc2 = 2;
  if (this->has_loc2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->loc2_, output);
  }

  // optional .bombplane_proto.PlaneLocator loc3 = 3;
  if (this->has_loc3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->loc3_, output);
  }

  // @@protoc_insertion_point(serialize_end:bombplane_proto.InitposNotification)
}

int InitposNotification::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bombplane_proto.InitposNotification)
  int total_size = 0;

  // optional .bombplane_proto.PlaneLocator loc1 = 1;
  if (this->has_loc1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->loc1_);
  }

  // optional .bombplane_proto.PlaneLocator loc2 = 2;
  if (this->has_loc2()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->loc2_);
  }

  // optional .bombplane_proto.PlaneLocator loc3 = 3;
  if (this->has_loc3()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->loc3_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitposNotification::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InitposNotification*>(&from));
}

void InitposNotification::MergeFrom(const InitposNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bombplane_proto.InitposNotification)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_loc1()) {
    mutable_loc1()->::bombplane_proto::PlaneLocator::MergeFrom(from.loc1());
  }
  if (from.has_loc2()) {
    mutable_loc2()->::bombplane_proto::PlaneLocator::MergeFrom(from.loc2());
  }
  if (from.has_loc3()) {
    mutable_loc3()->::bombplane_proto::PlaneLocator::MergeFrom(from.loc3());
  }
}

void InitposNotification::CopyFrom(const InitposNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bombplane_proto.InitposNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitposNotification::IsInitialized() const {

  return true;
}

void InitposNotification::Swap(InitposNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitposNotification::InternalSwap(InitposNotification* other) {
  std::swap(loc1_, other->loc1_);
  std::swap(loc2_, other->loc2_);
  std::swap(loc3_, other->loc3_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string InitposNotification::GetTypeName() const {
  return "bombplane_proto.InitposNotification";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitposNotification

// optional .bombplane_proto.PlaneLocator loc1 = 1;
bool InitposNotification::has_loc1() const {
  return !_is_default_instance_ && loc1_ != NULL;
}
void InitposNotification::clear_loc1() {
  if (GetArenaNoVirtual() == NULL && loc1_ != NULL) delete loc1_;
  loc1_ = NULL;
}
const ::bombplane_proto::PlaneLocator& InitposNotification::loc1() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.InitposNotification.loc1)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return loc1_ != NULL ? *loc1_ : *default_instance().loc1_;
#else
  return loc1_ != NULL ? *loc1_ : *default_instance_->loc1_;
#endif
}
::bombplane_proto::PlaneLocator* InitposNotification::mutable_loc1() {
  
  if (loc1_ == NULL) {
    loc1_ = new ::bombplane_proto::PlaneLocator;
  }
  // @@protoc_insertion_point(field_mutable:bombplane_proto.InitposNotification.loc1)
  return loc1_;
}
::bombplane_proto::PlaneLocator* InitposNotification::release_loc1() {
  // @@protoc_insertion_point(field_release:bombplane_proto.InitposNotification.loc1)
  
  ::bombplane_proto::PlaneLocator* temp = loc1_;
  loc1_ = NULL;
  return temp;
}
void InitposNotification::set_allocated_loc1(::bombplane_proto::PlaneLocator* loc1) {
  delete loc1_;
  loc1_ = loc1;
  if (loc1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bombplane_proto.InitposNotification.loc1)
}

// optional .bombplane_proto.PlaneLocator loc2 = 2;
bool InitposNotification::has_loc2() const {
  return !_is_default_instance_ && loc2_ != NULL;
}
void InitposNotification::clear_loc2() {
  if (GetArenaNoVirtual() == NULL && loc2_ != NULL) delete loc2_;
  loc2_ = NULL;
}
const ::bombplane_proto::PlaneLocator& InitposNotification::loc2() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.InitposNotification.loc2)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return loc2_ != NULL ? *loc2_ : *default_instance().loc2_;
#else
  return loc2_ != NULL ? *loc2_ : *default_instance_->loc2_;
#endif
}
::bombplane_proto::PlaneLocator* InitposNotification::mutable_loc2() {
  
  if (loc2_ == NULL) {
    loc2_ = new ::bombplane_proto::PlaneLocator;
  }
  // @@protoc_insertion_point(field_mutable:bombplane_proto.InitposNotification.loc2)
  return loc2_;
}
::bombplane_proto::PlaneLocator* InitposNotification::release_loc2() {
  // @@protoc_insertion_point(field_release:bombplane_proto.InitposNotification.loc2)
  
  ::bombplane_proto::PlaneLocator* temp = loc2_;
  loc2_ = NULL;
  return temp;
}
void InitposNotification::set_allocated_loc2(::bombplane_proto::PlaneLocator* loc2) {
  delete loc2_;
  loc2_ = loc2;
  if (loc2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bombplane_proto.InitposNotification.loc2)
}

// optional .bombplane_proto.PlaneLocator loc3 = 3;
bool InitposNotification::has_loc3() const {
  return !_is_default_instance_ && loc3_ != NULL;
}
void InitposNotification::clear_loc3() {
  if (GetArenaNoVirtual() == NULL && loc3_ != NULL) delete loc3_;
  loc3_ = NULL;
}
const ::bombplane_proto::PlaneLocator& InitposNotification::loc3() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.InitposNotification.loc3)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return loc3_ != NULL ? *loc3_ : *default_instance().loc3_;
#else
  return loc3_ != NULL ? *loc3_ : *default_instance_->loc3_;
#endif
}
::bombplane_proto::PlaneLocator* InitposNotification::mutable_loc3() {
  
  if (loc3_ == NULL) {
    loc3_ = new ::bombplane_proto::PlaneLocator;
  }
  // @@protoc_insertion_point(field_mutable:bombplane_proto.InitposNotification.loc3)
  return loc3_;
}
::bombplane_proto::PlaneLocator* InitposNotification::release_loc3() {
  // @@protoc_insertion_point(field_release:bombplane_proto.InitposNotification.loc3)
  
  ::bombplane_proto::PlaneLocator* temp = loc3_;
  loc3_ = NULL;
  return temp;
}
void InitposNotification::set_allocated_loc3(::bombplane_proto::PlaneLocator* loc3) {
  delete loc3_;
  loc3_ = loc3;
  if (loc3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bombplane_proto.InitposNotification.loc3)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GamestartNotification::kUseridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GamestartNotification::GamestartNotification()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bombplane_proto.GamestartNotification)
}

void GamestartNotification::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GamestartNotification::GamestartNotification(const GamestartNotification& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bombplane_proto.GamestartNotification)
}

void GamestartNotification::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  userid_ = 0;
}

GamestartNotification::~GamestartNotification() {
  // @@protoc_insertion_point(destructor:bombplane_proto.GamestartNotification)
  SharedDtor();
}

void GamestartNotification::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GamestartNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GamestartNotification& GamestartNotification::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_BombPlane_5fproto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_BombPlane_5fproto_2eproto();
#endif
  return *default_instance_;
}

GamestartNotification* GamestartNotification::default_instance_ = NULL;

GamestartNotification* GamestartNotification::New(::google::protobuf::Arena* arena) const {
  GamestartNotification* n = new GamestartNotification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GamestartNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bombplane_proto.GamestartNotification)
  userid_ = 0;
}

bool GamestartNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bombplane_proto.GamestartNotification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bombplane_proto.GamestartNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bombplane_proto.GamestartNotification)
  return false;
#undef DO_
}

void GamestartNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bombplane_proto.GamestartNotification)
  // optional int32 userid = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // @@protoc_insertion_point(serialize_end:bombplane_proto.GamestartNotification)
}

int GamestartNotification::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bombplane_proto.GamestartNotification)
  int total_size = 0;

  // optional int32 userid = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GamestartNotification::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GamestartNotification*>(&from));
}

void GamestartNotification::MergeFrom(const GamestartNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bombplane_proto.GamestartNotification)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
}

void GamestartNotification::CopyFrom(const GamestartNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bombplane_proto.GamestartNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamestartNotification::IsInitialized() const {

  return true;
}

void GamestartNotification::Swap(GamestartNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GamestartNotification::InternalSwap(GamestartNotification* other) {
  std::swap(userid_, other->userid_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GamestartNotification::GetTypeName() const {
  return "bombplane_proto.GamestartNotification";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GamestartNotification

// optional int32 userid = 1;
void GamestartNotification::clear_userid() {
  userid_ = 0;
}
 ::google::protobuf::int32 GamestartNotification::userid() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.GamestartNotification.userid)
  return userid_;
}
 void GamestartNotification::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:bombplane_proto.GamestartNotification.userid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BombRequest::kPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BombRequest::BombRequest()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bombplane_proto.BombRequest)
}

void BombRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pos_ = const_cast< ::bombplane_proto::Coordinate*>(
      ::bombplane_proto::Coordinate::internal_default_instance());
#else
  pos_ = const_cast< ::bombplane_proto::Coordinate*>(&::bombplane_proto::Coordinate::default_instance());
#endif
}

BombRequest::BombRequest(const BombRequest& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bombplane_proto.BombRequest)
}

void BombRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  pos_ = NULL;
}

BombRequest::~BombRequest() {
  // @@protoc_insertion_point(destructor:bombplane_proto.BombRequest)
  SharedDtor();
}

void BombRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete pos_;
  }
}

void BombRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BombRequest& BombRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_BombPlane_5fproto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_BombPlane_5fproto_2eproto();
#endif
  return *default_instance_;
}

BombRequest* BombRequest::default_instance_ = NULL;

BombRequest* BombRequest::New(::google::protobuf::Arena* arena) const {
  BombRequest* n = new BombRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BombRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bombplane_proto.BombRequest)
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
}

bool BombRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bombplane_proto.BombRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bombplane_proto.Coordinate pos = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bombplane_proto.BombRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bombplane_proto.BombRequest)
  return false;
#undef DO_
}

void BombRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bombplane_proto.BombRequest)
  // optional .bombplane_proto.Coordinate pos = 1;
  if (this->has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->pos_, output);
  }

  // @@protoc_insertion_point(serialize_end:bombplane_proto.BombRequest)
}

int BombRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bombplane_proto.BombRequest)
  int total_size = 0;

  // optional .bombplane_proto.Coordinate pos = 1;
  if (this->has_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BombRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BombRequest*>(&from));
}

void BombRequest::MergeFrom(const BombRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bombplane_proto.BombRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_pos()) {
    mutable_pos()->::bombplane_proto::Coordinate::MergeFrom(from.pos());
  }
}

void BombRequest::CopyFrom(const BombRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bombplane_proto.BombRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BombRequest::IsInitialized() const {

  return true;
}

void BombRequest::Swap(BombRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BombRequest::InternalSwap(BombRequest* other) {
  std::swap(pos_, other->pos_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string BombRequest::GetTypeName() const {
  return "bombplane_proto.BombRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BombRequest

// optional .bombplane_proto.Coordinate pos = 1;
bool BombRequest::has_pos() const {
  return !_is_default_instance_ && pos_ != NULL;
}
void BombRequest::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
}
const ::bombplane_proto::Coordinate& BombRequest::pos() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.BombRequest.pos)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return pos_ != NULL ? *pos_ : *default_instance().pos_;
#else
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
#endif
}
::bombplane_proto::Coordinate* BombRequest::mutable_pos() {
  
  if (pos_ == NULL) {
    pos_ = new ::bombplane_proto::Coordinate;
  }
  // @@protoc_insertion_point(field_mutable:bombplane_proto.BombRequest.pos)
  return pos_;
}
::bombplane_proto::Coordinate* BombRequest::release_pos() {
  // @@protoc_insertion_point(field_release:bombplane_proto.BombRequest.pos)
  
  ::bombplane_proto::Coordinate* temp = pos_;
  pos_ = NULL;
  return temp;
}
void BombRequest::set_allocated_pos(::bombplane_proto::Coordinate* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bombplane_proto.BombRequest.pos)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

bool BombResponse_BOMB_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BombResponse_BOMB_RESULT BombResponse::MISS;
const BombResponse_BOMB_RESULT BombResponse::HIT;
const BombResponse_BOMB_RESULT BombResponse::DESTORYED;
const BombResponse_BOMB_RESULT BombResponse::BOMB_RESULT_MIN;
const BombResponse_BOMB_RESULT BombResponse::BOMB_RESULT_MAX;
const int BombResponse::BOMB_RESULT_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BombResponse::kResFieldNumber;
const int BombResponse::kPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BombResponse::BombResponse()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bombplane_proto.BombResponse)
}

void BombResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pos_ = const_cast< ::bombplane_proto::Coordinate*>(
      ::bombplane_proto::Coordinate::internal_default_instance());
#else
  pos_ = const_cast< ::bombplane_proto::Coordinate*>(&::bombplane_proto::Coordinate::default_instance());
#endif
}

BombResponse::BombResponse(const BombResponse& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bombplane_proto.BombResponse)
}

void BombResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  res_ = 0;
  pos_ = NULL;
}

BombResponse::~BombResponse() {
  // @@protoc_insertion_point(destructor:bombplane_proto.BombResponse)
  SharedDtor();
}

void BombResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete pos_;
  }
}

void BombResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BombResponse& BombResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_BombPlane_5fproto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_BombPlane_5fproto_2eproto();
#endif
  return *default_instance_;
}

BombResponse* BombResponse::default_instance_ = NULL;

BombResponse* BombResponse::New(::google::protobuf::Arena* arena) const {
  BombResponse* n = new BombResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BombResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bombplane_proto.BombResponse)
  res_ = 0;
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
}

bool BombResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bombplane_proto.BombResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bombplane_proto.BombResponse.BOMB_RESULT res = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_res(static_cast< ::bombplane_proto::BombResponse_BOMB_RESULT >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }

      // optional .bombplane_proto.Coordinate pos = 2;
      case 2: {
        if (tag == 18) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bombplane_proto.BombResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bombplane_proto.BombResponse)
  return false;
#undef DO_
}

void BombResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bombplane_proto.BombResponse)
  // optional .bombplane_proto.BombResponse.BOMB_RESULT res = 1;
  if (this->res() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->res(), output);
  }

  // optional .bombplane_proto.Coordinate pos = 2;
  if (this->has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->pos_, output);
  }

  // @@protoc_insertion_point(serialize_end:bombplane_proto.BombResponse)
}

int BombResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bombplane_proto.BombResponse)
  int total_size = 0;

  // optional .bombplane_proto.BombResponse.BOMB_RESULT res = 1;
  if (this->res() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
  }

  // optional .bombplane_proto.Coordinate pos = 2;
  if (this->has_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BombResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BombResponse*>(&from));
}

void BombResponse::MergeFrom(const BombResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bombplane_proto.BombResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.res() != 0) {
    set_res(from.res());
  }
  if (from.has_pos()) {
    mutable_pos()->::bombplane_proto::Coordinate::MergeFrom(from.pos());
  }
}

void BombResponse::CopyFrom(const BombResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bombplane_proto.BombResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BombResponse::IsInitialized() const {

  return true;
}

void BombResponse::Swap(BombResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BombResponse::InternalSwap(BombResponse* other) {
  std::swap(res_, other->res_);
  std::swap(pos_, other->pos_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string BombResponse::GetTypeName() const {
  return "bombplane_proto.BombResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BombResponse

// optional .bombplane_proto.BombResponse.BOMB_RESULT res = 1;
void BombResponse::clear_res() {
  res_ = 0;
}
 ::bombplane_proto::BombResponse_BOMB_RESULT BombResponse::res() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.BombResponse.res)
  return static_cast< ::bombplane_proto::BombResponse_BOMB_RESULT >(res_);
}
 void BombResponse::set_res(::bombplane_proto::BombResponse_BOMB_RESULT value) {
  
  res_ = value;
  // @@protoc_insertion_point(field_set:bombplane_proto.BombResponse.res)
}

// optional .bombplane_proto.Coordinate pos = 2;
bool BombResponse::has_pos() const {
  return !_is_default_instance_ && pos_ != NULL;
}
void BombResponse::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
}
const ::bombplane_proto::Coordinate& BombResponse::pos() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.BombResponse.pos)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return pos_ != NULL ? *pos_ : *default_instance().pos_;
#else
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
#endif
}
::bombplane_proto::Coordinate* BombResponse::mutable_pos() {
  
  if (pos_ == NULL) {
    pos_ = new ::bombplane_proto::Coordinate;
  }
  // @@protoc_insertion_point(field_mutable:bombplane_proto.BombResponse.pos)
  return pos_;
}
::bombplane_proto::Coordinate* BombResponse::release_pos() {
  // @@protoc_insertion_point(field_release:bombplane_proto.BombResponse.pos)
  
  ::bombplane_proto::Coordinate* temp = pos_;
  pos_ = NULL;
  return temp;
}
void BombResponse::set_allocated_pos(::bombplane_proto::Coordinate* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bombplane_proto.BombResponse.pos)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GuessRequest::kLocFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GuessRequest::GuessRequest()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bombplane_proto.GuessRequest)
}

void GuessRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  loc_ = const_cast< ::bombplane_proto::PlaneLocator*>(
      ::bombplane_proto::PlaneLocator::internal_default_instance());
#else
  loc_ = const_cast< ::bombplane_proto::PlaneLocator*>(&::bombplane_proto::PlaneLocator::default_instance());
#endif
}

GuessRequest::GuessRequest(const GuessRequest& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bombplane_proto.GuessRequest)
}

void GuessRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  loc_ = NULL;
}

GuessRequest::~GuessRequest() {
  // @@protoc_insertion_point(destructor:bombplane_proto.GuessRequest)
  SharedDtor();
}

void GuessRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete loc_;
  }
}

void GuessRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GuessRequest& GuessRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_BombPlane_5fproto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_BombPlane_5fproto_2eproto();
#endif
  return *default_instance_;
}

GuessRequest* GuessRequest::default_instance_ = NULL;

GuessRequest* GuessRequest::New(::google::protobuf::Arena* arena) const {
  GuessRequest* n = new GuessRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GuessRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bombplane_proto.GuessRequest)
  if (GetArenaNoVirtual() == NULL && loc_ != NULL) delete loc_;
  loc_ = NULL;
}

bool GuessRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bombplane_proto.GuessRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bombplane_proto.PlaneLocator loc = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bombplane_proto.GuessRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bombplane_proto.GuessRequest)
  return false;
#undef DO_
}

void GuessRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bombplane_proto.GuessRequest)
  // optional .bombplane_proto.PlaneLocator loc = 1;
  if (this->has_loc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->loc_, output);
  }

  // @@protoc_insertion_point(serialize_end:bombplane_proto.GuessRequest)
}

int GuessRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bombplane_proto.GuessRequest)
  int total_size = 0;

  // optional .bombplane_proto.PlaneLocator loc = 1;
  if (this->has_loc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->loc_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuessRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GuessRequest*>(&from));
}

void GuessRequest::MergeFrom(const GuessRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bombplane_proto.GuessRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_loc()) {
    mutable_loc()->::bombplane_proto::PlaneLocator::MergeFrom(from.loc());
  }
}

void GuessRequest::CopyFrom(const GuessRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bombplane_proto.GuessRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuessRequest::IsInitialized() const {

  return true;
}

void GuessRequest::Swap(GuessRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GuessRequest::InternalSwap(GuessRequest* other) {
  std::swap(loc_, other->loc_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GuessRequest::GetTypeName() const {
  return "bombplane_proto.GuessRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GuessRequest

// optional .bombplane_proto.PlaneLocator loc = 1;
bool GuessRequest::has_loc() const {
  return !_is_default_instance_ && loc_ != NULL;
}
void GuessRequest::clear_loc() {
  if (GetArenaNoVirtual() == NULL && loc_ != NULL) delete loc_;
  loc_ = NULL;
}
const ::bombplane_proto::PlaneLocator& GuessRequest::loc() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.GuessRequest.loc)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return loc_ != NULL ? *loc_ : *default_instance().loc_;
#else
  return loc_ != NULL ? *loc_ : *default_instance_->loc_;
#endif
}
::bombplane_proto::PlaneLocator* GuessRequest::mutable_loc() {
  
  if (loc_ == NULL) {
    loc_ = new ::bombplane_proto::PlaneLocator;
  }
  // @@protoc_insertion_point(field_mutable:bombplane_proto.GuessRequest.loc)
  return loc_;
}
::bombplane_proto::PlaneLocator* GuessRequest::release_loc() {
  // @@protoc_insertion_point(field_release:bombplane_proto.GuessRequest.loc)
  
  ::bombplane_proto::PlaneLocator* temp = loc_;
  loc_ = NULL;
  return temp;
}
void GuessRequest::set_allocated_loc(::bombplane_proto::PlaneLocator* loc) {
  delete loc_;
  loc_ = loc;
  if (loc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bombplane_proto.GuessRequest.loc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GuessResponse::kDestroyedFieldNumber;
const int GuessResponse::kLocFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GuessResponse::GuessResponse()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bombplane_proto.GuessResponse)
}

void GuessResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  loc_ = const_cast< ::bombplane_proto::PlaneLocator*>(
      ::bombplane_proto::PlaneLocator::internal_default_instance());
#else
  loc_ = const_cast< ::bombplane_proto::PlaneLocator*>(&::bombplane_proto::PlaneLocator::default_instance());
#endif
}

GuessResponse::GuessResponse(const GuessResponse& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bombplane_proto.GuessResponse)
}

void GuessResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  destroyed_ = false;
  loc_ = NULL;
}

GuessResponse::~GuessResponse() {
  // @@protoc_insertion_point(destructor:bombplane_proto.GuessResponse)
  SharedDtor();
}

void GuessResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete loc_;
  }
}

void GuessResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GuessResponse& GuessResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_BombPlane_5fproto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_BombPlane_5fproto_2eproto();
#endif
  return *default_instance_;
}

GuessResponse* GuessResponse::default_instance_ = NULL;

GuessResponse* GuessResponse::New(::google::protobuf::Arena* arena) const {
  GuessResponse* n = new GuessResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GuessResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bombplane_proto.GuessResponse)
  destroyed_ = false;
  if (GetArenaNoVirtual() == NULL && loc_ != NULL) delete loc_;
  loc_ = NULL;
}

bool GuessResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bombplane_proto.GuessResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool destroyed = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &destroyed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loc;
        break;
      }

      // optional .bombplane_proto.PlaneLocator loc = 2;
      case 2: {
        if (tag == 18) {
         parse_loc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bombplane_proto.GuessResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bombplane_proto.GuessResponse)
  return false;
#undef DO_
}

void GuessResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bombplane_proto.GuessResponse)
  // optional bool destroyed = 1;
  if (this->destroyed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->destroyed(), output);
  }

  // optional .bombplane_proto.PlaneLocator loc = 2;
  if (this->has_loc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->loc_, output);
  }

  // @@protoc_insertion_point(serialize_end:bombplane_proto.GuessResponse)
}

int GuessResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bombplane_proto.GuessResponse)
  int total_size = 0;

  // optional bool destroyed = 1;
  if (this->destroyed() != 0) {
    total_size += 1 + 1;
  }

  // optional .bombplane_proto.PlaneLocator loc = 2;
  if (this->has_loc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->loc_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuessResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GuessResponse*>(&from));
}

void GuessResponse::MergeFrom(const GuessResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bombplane_proto.GuessResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.destroyed() != 0) {
    set_destroyed(from.destroyed());
  }
  if (from.has_loc()) {
    mutable_loc()->::bombplane_proto::PlaneLocator::MergeFrom(from.loc());
  }
}

void GuessResponse::CopyFrom(const GuessResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bombplane_proto.GuessResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuessResponse::IsInitialized() const {

  return true;
}

void GuessResponse::Swap(GuessResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GuessResponse::InternalSwap(GuessResponse* other) {
  std::swap(destroyed_, other->destroyed_);
  std::swap(loc_, other->loc_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GuessResponse::GetTypeName() const {
  return "bombplane_proto.GuessResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GuessResponse

// optional bool destroyed = 1;
void GuessResponse::clear_destroyed() {
  destroyed_ = false;
}
 bool GuessResponse::destroyed() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.GuessResponse.destroyed)
  return destroyed_;
}
 void GuessResponse::set_destroyed(bool value) {
  
  destroyed_ = value;
  // @@protoc_insertion_point(field_set:bombplane_proto.GuessResponse.destroyed)
}

// optional .bombplane_proto.PlaneLocator loc = 2;
bool GuessResponse::has_loc() const {
  return !_is_default_instance_ && loc_ != NULL;
}
void GuessResponse::clear_loc() {
  if (GetArenaNoVirtual() == NULL && loc_ != NULL) delete loc_;
  loc_ = NULL;
}
const ::bombplane_proto::PlaneLocator& GuessResponse::loc() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.GuessResponse.loc)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return loc_ != NULL ? *loc_ : *default_instance().loc_;
#else
  return loc_ != NULL ? *loc_ : *default_instance_->loc_;
#endif
}
::bombplane_proto::PlaneLocator* GuessResponse::mutable_loc() {
  
  if (loc_ == NULL) {
    loc_ = new ::bombplane_proto::PlaneLocator;
  }
  // @@protoc_insertion_point(field_mutable:bombplane_proto.GuessResponse.loc)
  return loc_;
}
::bombplane_proto::PlaneLocator* GuessResponse::release_loc() {
  // @@protoc_insertion_point(field_release:bombplane_proto.GuessResponse.loc)
  
  ::bombplane_proto::PlaneLocator* temp = loc_;
  loc_ = NULL;
  return temp;
}
void GuessResponse::set_allocated_loc(::bombplane_proto::PlaneLocator* loc) {
  delete loc_;
  loc_ = loc;
  if (loc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bombplane_proto.GuessResponse.loc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameoverNotification::kWinneridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameoverNotification::GameoverNotification()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bombplane_proto.GameoverNotification)
}

void GameoverNotification::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GameoverNotification::GameoverNotification(const GameoverNotification& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bombplane_proto.GameoverNotification)
}

void GameoverNotification::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  winnerid_ = 0;
}

GameoverNotification::~GameoverNotification() {
  // @@protoc_insertion_point(destructor:bombplane_proto.GameoverNotification)
  SharedDtor();
}

void GameoverNotification::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GameoverNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GameoverNotification& GameoverNotification::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_BombPlane_5fproto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_BombPlane_5fproto_2eproto();
#endif
  return *default_instance_;
}

GameoverNotification* GameoverNotification::default_instance_ = NULL;

GameoverNotification* GameoverNotification::New(::google::protobuf::Arena* arena) const {
  GameoverNotification* n = new GameoverNotification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameoverNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bombplane_proto.GameoverNotification)
  winnerid_ = 0;
}

bool GameoverNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bombplane_proto.GameoverNotification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 winnerid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winnerid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bombplane_proto.GameoverNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bombplane_proto.GameoverNotification)
  return false;
#undef DO_
}

void GameoverNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bombplane_proto.GameoverNotification)
  // optional int32 winnerid = 1;
  if (this->winnerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->winnerid(), output);
  }

  // @@protoc_insertion_point(serialize_end:bombplane_proto.GameoverNotification)
}

int GameoverNotification::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bombplane_proto.GameoverNotification)
  int total_size = 0;

  // optional int32 winnerid = 1;
  if (this->winnerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->winnerid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameoverNotification::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameoverNotification*>(&from));
}

void GameoverNotification::MergeFrom(const GameoverNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bombplane_proto.GameoverNotification)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.winnerid() != 0) {
    set_winnerid(from.winnerid());
  }
}

void GameoverNotification::CopyFrom(const GameoverNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bombplane_proto.GameoverNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameoverNotification::IsInitialized() const {

  return true;
}

void GameoverNotification::Swap(GameoverNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameoverNotification::InternalSwap(GameoverNotification* other) {
  std::swap(winnerid_, other->winnerid_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GameoverNotification::GetTypeName() const {
  return "bombplane_proto.GameoverNotification";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameoverNotification

// optional int32 winnerid = 1;
void GameoverNotification::clear_winnerid() {
  winnerid_ = 0;
}
 ::google::protobuf::int32 GameoverNotification::winnerid() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.GameoverNotification.winnerid)
  return winnerid_;
}
 void GameoverNotification::set_winnerid(::google::protobuf::int32 value) {
  
  winnerid_ = value;
  // @@protoc_insertion_point(field_set:bombplane_proto.GameoverNotification.winnerid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

bool GamecrushNotification_CrushReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GamecrushNotification_CrushReason GamecrushNotification::OPPONENT_OFF;
const GamecrushNotification_CrushReason GamecrushNotification::SERVER_ERROR;
const GamecrushNotification_CrushReason GamecrushNotification::CrushReason_MIN;
const GamecrushNotification_CrushReason GamecrushNotification::CrushReason_MAX;
const int GamecrushNotification::CrushReason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GamecrushNotification::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GamecrushNotification::GamecrushNotification()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bombplane_proto.GamecrushNotification)
}

void GamecrushNotification::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GamecrushNotification::GamecrushNotification(const GamecrushNotification& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bombplane_proto.GamecrushNotification)
}

void GamecrushNotification::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  reason_ = 0;
}

GamecrushNotification::~GamecrushNotification() {
  // @@protoc_insertion_point(destructor:bombplane_proto.GamecrushNotification)
  SharedDtor();
}

void GamecrushNotification::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GamecrushNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GamecrushNotification& GamecrushNotification::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_BombPlane_5fproto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_BombPlane_5fproto_2eproto();
#endif
  return *default_instance_;
}

GamecrushNotification* GamecrushNotification::default_instance_ = NULL;

GamecrushNotification* GamecrushNotification::New(::google::protobuf::Arena* arena) const {
  GamecrushNotification* n = new GamecrushNotification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GamecrushNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bombplane_proto.GamecrushNotification)
  reason_ = 0;
}

bool GamecrushNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bombplane_proto.GamecrushNotification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bombplane_proto.GamecrushNotification.CrushReason reason = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reason(static_cast< ::bombplane_proto::GamecrushNotification_CrushReason >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bombplane_proto.GamecrushNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bombplane_proto.GamecrushNotification)
  return false;
#undef DO_
}

void GamecrushNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bombplane_proto.GamecrushNotification)
  // optional .bombplane_proto.GamecrushNotification.CrushReason reason = 1;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reason(), output);
  }

  // @@protoc_insertion_point(serialize_end:bombplane_proto.GamecrushNotification)
}

int GamecrushNotification::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bombplane_proto.GamecrushNotification)
  int total_size = 0;

  // optional .bombplane_proto.GamecrushNotification.CrushReason reason = 1;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GamecrushNotification::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GamecrushNotification*>(&from));
}

void GamecrushNotification::MergeFrom(const GamecrushNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bombplane_proto.GamecrushNotification)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.reason() != 0) {
    set_reason(from.reason());
  }
}

void GamecrushNotification::CopyFrom(const GamecrushNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bombplane_proto.GamecrushNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamecrushNotification::IsInitialized() const {

  return true;
}

void GamecrushNotification::Swap(GamecrushNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GamecrushNotification::InternalSwap(GamecrushNotification* other) {
  std::swap(reason_, other->reason_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GamecrushNotification::GetTypeName() const {
  return "bombplane_proto.GamecrushNotification";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GamecrushNotification

// optional .bombplane_proto.GamecrushNotification.CrushReason reason = 1;
void GamecrushNotification::clear_reason() {
  reason_ = 0;
}
 ::bombplane_proto::GamecrushNotification_CrushReason GamecrushNotification::reason() const {
  // @@protoc_insertion_point(field_get:bombplane_proto.GamecrushNotification.reason)
  return static_cast< ::bombplane_proto::GamecrushNotification_CrushReason >(reason_);
}
 void GamecrushNotification::set_reason(::bombplane_proto::GamecrushNotification_CrushReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:bombplane_proto.GamecrushNotification.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace bombplane_proto

// @@protoc_insertion_point(global_scope)
